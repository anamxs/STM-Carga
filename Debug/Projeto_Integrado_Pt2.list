
Projeto_Integrado_Pt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003714  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000175c  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f7c  08004f7c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004f7c  08004f7c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f7c  08004f7c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000080  08005004  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08005004  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000805b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001696  00000000  00000000  00028104  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  000297a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000173df  00000000  00000000  00029ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000066c5  00000000  00000000  0004129f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00083143  00000000  00000000  00047964  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000caaa7  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000650  00000000  00000000  000cab28  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00002024  00000000  00000000  000cb178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003808 	.word	0x08003808

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003808 	.word	0x08003808

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <main>:


SPI_HandleTypeDef hspi1;

int main(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b09b      	sub	sp, #108	; 0x6c
 8000658:	af04      	add	r7, sp, #16
  HAL_Init();
 800065a:	f001 fadf 	bl	8001c1c <HAL_Init>
  SystemClock_Config();
 800065e:	f000 fec7 	bl	80013f0 <SystemClock_Config>
  MX_GPIO_Init();
 8000662:	f000 ff39 	bl	80014d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000666:	f000 feff 	bl	8001468 <MX_SPI1_Init>
  ST7735_Init();
 800066a:	f001 f87d 	bl	8001768 <ST7735_Init>

  // tela inicial
  ST7735_FillScreen(BLACK);
 800066e:	2000      	movs	r0, #0
 8000670:	f001 f9c8 	bl	8001a04 <ST7735_FillScreen>
  MostrarTitulo("ENTREGA", "DE CARGAS");
 8000674:	495e      	ldr	r1, [pc, #376]	; (80007f0 <main+0x19c>)
 8000676:	485f      	ldr	r0, [pc, #380]	; (80007f4 <main+0x1a0>)
 8000678:	f000 fc2a 	bl	8000ed0 <MostrarTitulo>
  HAL_Delay(1400);
 800067c:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8000680:	f001 fb2e 	bl	8001ce0 <HAL_Delay>
  ST7735_FillScreen(BLACK);
 8000684:	2000      	movs	r0, #0
 8000686:	f001 f9bd 	bl	8001a04 <ST7735_FillScreen>
  ST7735_WriteString(10, 10, "PRESSIONE PA12", Font_7x10, GREEN, BLACK);
 800068a:	4b5b      	ldr	r3, [pc, #364]	; (80007f8 <main+0x1a4>)
 800068c:	2200      	movs	r2, #0
 800068e:	9202      	str	r2, [sp, #8]
 8000690:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	9200      	str	r2, [sp, #0]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a57      	ldr	r2, [pc, #348]	; (80007fc <main+0x1a8>)
 800069e:	210a      	movs	r1, #10
 80006a0:	200a      	movs	r0, #10
 80006a2:	f001 f8f1 	bl	8001888 <ST7735_WriteString>
  ST7735_WriteString(10, 22, "PARA CONTINUAR", Font_7x10, GREEN, BLACK);
 80006a6:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <main+0x1a4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	9202      	str	r2, [sp, #8]
 80006ac:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	9200      	str	r2, [sp, #0]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a51      	ldr	r2, [pc, #324]	; (8000800 <main+0x1ac>)
 80006ba:	2116      	movs	r1, #22
 80006bc:	200a      	movs	r0, #10
 80006be:	f001 f8e3 	bl	8001888 <ST7735_WriteString>
  EsperaOK();
 80006c2:	f000 fc2d 	bl	8000f20 <EsperaOK>
  Alvo alvo;

  while (1)
  {
    // 1) Inicializa cenário (alvos, pacote, etc.)
    InicializarSimulacao(&par, &alvo);
 80006c6:	f107 0210 	add.w	r2, r7, #16
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f8a7 	bl	8000824 <InicializarSimulacao>

    // 2) Usuário pode alterar parâmetros
    ConfigurarParametros(&par);
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f904 	bl	80008e8 <ConfigurarParametros>

    // (mostra um resumo curto antes de iniciar)
    const char *fmt_txt = (alvo.formato==0) ? "Quadrado" : "Cruz";
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d101      	bne.n	80006ea <main+0x96>
 80006e6:	4b47      	ldr	r3, [pc, #284]	; (8000804 <main+0x1b0>)
 80006e8:	e000      	b.n	80006ec <main+0x98>
 80006ea:	4b47      	ldr	r3, [pc, #284]	; (8000808 <main+0x1b4>)
 80006ec:	657b      	str	r3, [r7, #84]	; 0x54
    MostrarResumoParametros(&par, alvo.raio*2, fmt_txt);
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	0059      	lsls	r1, r3, #1
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fc25 	bl	8000f48 <MostrarResumoParametros>
    EsperaOK();
 80006fe:	f000 fc0f 	bl	8000f20 <EsperaOK>
    ST7735_FillScreen(BLACK);
 8000702:	2000      	movs	r0, #0
 8000704:	f001 f97e 	bl	8001a04 <ST7735_FillScreen>

    // 3) Executar lançamento, obter tempo e posição final
    uint32_t tempo_ms = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
    int xfinal = 0, yfinal = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
    ExecutarLancamento(&par, &alvo, &tempo_ms, &xfinal, &yfinal);
 8000714:	f107 0408 	add.w	r4, r7, #8
 8000718:	f107 020c 	add.w	r2, r7, #12
 800071c:	f107 0110 	add.w	r1, r7, #16
 8000720:	f107 0020 	add.w	r0, r7, #32
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	4623      	mov	r3, r4
 800072a:	f000 f92d 	bl	8000988 <ExecutarLancamento>

    // 4) Avaliar tentativa
    uint8_t acerto = AvaliarTentativa(&alvo, xfinal, yfinal);
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fa00 	bl	8000b3c <AvaliarTentativa>
 800073c:	4603      	mov	r3, r0
 800073e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    // Mensagem de resultado
    ST7735_FillScreen(BLACK);
 8000742:	2000      	movs	r0, #0
 8000744:	f001 f95e 	bl	8001a04 <ST7735_FillScreen>
    if (acerto) {
 8000748:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00e      	beq.n	800076e <main+0x11a>
      ST7735_WriteString(10, 40, "ACERTOU O ALVO!", Font_11x18, GREEN, BLACK);
 8000750:	4b2e      	ldr	r3, [pc, #184]	; (800080c <main+0x1b8>)
 8000752:	2200      	movs	r2, #0
 8000754:	9202      	str	r2, [sp, #8]
 8000756:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800075a:	9201      	str	r2, [sp, #4]
 800075c:	685a      	ldr	r2, [r3, #4]
 800075e:	9200      	str	r2, [sp, #0]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a2b      	ldr	r2, [pc, #172]	; (8000810 <main+0x1bc>)
 8000764:	2128      	movs	r1, #40	; 0x28
 8000766:	200a      	movs	r0, #10
 8000768:	f001 f88e 	bl	8001888 <ST7735_WriteString>
 800076c:	e00d      	b.n	800078a <main+0x136>
    } else {
      ST7735_WriteString(20, 40, "ERROU O ALVO!", Font_11x18, RED, BLACK);
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <main+0x1b8>)
 8000770:	2200      	movs	r2, #0
 8000772:	9202      	str	r2, [sp, #8]
 8000774:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	9200      	str	r2, [sp, #0]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a24      	ldr	r2, [pc, #144]	; (8000814 <main+0x1c0>)
 8000782:	2128      	movs	r1, #40	; 0x28
 8000784:	2014      	movs	r0, #20
 8000786:	f001 f87f 	bl	8001888 <ST7735_WriteString>
    }
    HAL_Delay(1500);
 800078a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800078e:	f001 faa7 	bl	8001ce0 <HAL_Delay>

    // 5) Registrar tentativa
    int x0 = 1 + 15; // aviao parte de x=1 com largura 15 (pos inicial da carga)
 8000792:	2310      	movs	r3, #16
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
    int y0 = par.aviao.y;
 8000796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
    RegistrarTentativa(&par, &alvo, tempo_ms, acerto, x0, y0);
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	f897 4053 	ldrb.w	r4, [r7, #83]	; 0x53
 80007a0:	f107 0110 	add.w	r1, r7, #16
 80007a4:	f107 0020 	add.w	r0, r7, #32
 80007a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	4623      	mov	r3, r4
 80007b2:	f000 fa3b 	bl	8000c2c <RegistrarTentativa>

    // 6) A cada 3 simulações, exibe resumo e zera índice
    if (g_tentativa_idx == 3) {
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <main+0x1c4>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d183      	bne.n	80006c6 <main+0x72>
      ExibirResumoFinal(g_tentativas, 3);
 80007be:	2103      	movs	r1, #3
 80007c0:	4816      	ldr	r0, [pc, #88]	; (800081c <main+0x1c8>)
 80007c2:	f000 fa7f 	bl	8000cc4 <ExibirResumoFinal>
      g_tentativa_idx = 0;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <main+0x1c4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
      ST7735_WriteString(10, 120, "PA12 P/ NOVO CICLO", Font_7x10, YELLOW, BLACK);
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <main+0x1a4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	9202      	str	r2, [sp, #8]
 80007d2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80007d6:	9201      	str	r2, [sp, #4]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	9200      	str	r2, [sp, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <main+0x1cc>)
 80007e0:	2178      	movs	r1, #120	; 0x78
 80007e2:	200a      	movs	r0, #10
 80007e4:	f001 f850 	bl	8001888 <ST7735_WriteString>
      EsperaOK();
 80007e8:	f000 fb9a 	bl	8000f20 <EsperaOK>
  {
 80007ec:	e76b      	b.n	80006c6 <main+0x72>
 80007ee:	bf00      	nop
 80007f0:	08003820 	.word	0x08003820
 80007f4:	0800382c 	.word	0x0800382c
 80007f8:	20000000 	.word	0x20000000
 80007fc:	08003834 	.word	0x08003834
 8000800:	08003844 	.word	0x08003844
 8000804:	08003854 	.word	0x08003854
 8000808:	08003860 	.word	0x08003860
 800080c:	20000008 	.word	0x20000008
 8000810:	08003868 	.word	0x08003868
 8000814:	08003878 	.word	0x08003878
 8000818:	20000120 	.word	0x20000120
 800081c:	2000009c 	.word	0x2000009c
 8000820:	08003888 	.word	0x08003888

08000824 <InicializarSimulacao>:
  }
}


void InicializarSimulacao(Parametros *par, Alvo *alvo)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  // Valores base
  par->massa = 5;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2205      	movs	r2, #5
 8000832:	601a      	str	r2, [r3, #0]
  par->tentativas_cfg = 3;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2203      	movs	r2, #3
 8000838:	605a      	str	r2, [r3, #4]

  // Avião
  par->aviao.y = 30;        // altura
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	221e      	movs	r2, #30
 800083e:	611a      	str	r2, [r3, #16]
  par->aviao.vx = 2;        // velocidade horizontal
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2202      	movs	r2, #2
 8000844:	615a      	str	r2, [r3, #20]
  par->aviao.px_w = 15;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	220f      	movs	r2, #15
 800084a:	619a      	str	r2, [r3, #24]
  par->aviao.px_h = 5;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2205      	movs	r2, #5
 8000850:	61da      	str	r2, [r3, #28]

  // Vento
  par->vento.forca = 1;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	609a      	str	r2, [r3, #8]
  par->vento.direcao = 0; // esquerda
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]

  // Pacote: alterna peso e formato a cada simulação para gerar cenários diferentes
  par->pacote.peso = (g_tentativa_idx % 2);         // 0,1,0,1...
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <InicializarSimulacao+0xc0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f003 0201 	and.w	r2, r3, #1
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	621a      	str	r2, [r3, #32]
  par->pacote.formato = (g_tentativa_idx / 1) % 2;  // 0,1,0,1...
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <InicializarSimulacao+0xc0>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	f003 0201 	and.w	r2, r3, #1
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	625a      	str	r2, [r3, #36]	; 0x24

  // Alvo: tamanho muda a cada cenário
  // lado do quadrado: 4, 6, 8 ... mapeado por idx; para "cruz", usamos um "raio" equivalente
  int base = 4 + (g_tentativa_idx * 2); // 4,6,8
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <InicializarSimulacao+0xc0>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3302      	adds	r3, #2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	613b      	str	r3, [r7, #16]
  alvo->raio = base / 2;                // "raio" = metade do lado
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	0fda      	lsrs	r2, r3, #31
 8000884:	4413      	add	r3, r2
 8000886:	105b      	asrs	r3, r3, #1
 8000888:	461a      	mov	r2, r3
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	609a      	str	r2, [r3, #8]
  alvo->formato = par->pacote.formato;  // atrelar formato do pacote ao tipo do alvo (cenário diferente)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	60da      	str	r2, [r3, #12]

  // posiciona alvo em X aleatório no chão (y=75) garantindo que caiba na tela
  int maxX = 160 - (alvo->raio*2) - 5;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	3b05      	subs	r3, #5
 80008a2:	617b      	str	r3, [r7, #20]
  int minX = 112; // como no seu código original
 80008a4:	2370      	movs	r3, #112	; 0x70
 80008a6:	60fb      	str	r3, [r7, #12]
  if (maxX < minX) maxX = minX;
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	da01      	bge.n	80008b4 <InicializarSimulacao+0x90>
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	617b      	str	r3, [r7, #20]
  alvo->x = minX + (rand() % (maxX - minX + 1));
 80008b4:	f002 fbd4 	bl	8003060 <rand>
 80008b8:	4602      	mov	r2, r0
 80008ba:	6979      	ldr	r1, [r7, #20]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	3301      	adds	r3, #1
 80008c2:	fb92 f1f3 	sdiv	r1, r2, r3
 80008c6:	fb03 f301 	mul.w	r3, r3, r1
 80008ca:	1ad2      	subs	r2, r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	441a      	add	r2, r3
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	601a      	str	r2, [r3, #0]
  alvo->y = 75;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	224b      	movs	r2, #75	; 0x4b
 80008d8:	605a      	str	r2, [r3, #4]
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000120 	.word	0x20000120

080008e8 <ConfigurarParametros>:

void ConfigurarParametros(Parametros *par)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  ST7735_FillScreen(BLACK);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 f887 	bl	8001a04 <ST7735_FillScreen>
  Option_Input(&par->aviao.y,      "ALTURA",      10, 70);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f103 0010 	add.w	r0, r3, #16
 80008fc:	2346      	movs	r3, #70	; 0x46
 80008fe:	220a      	movs	r2, #10
 8000900:	491a      	ldr	r1, [pc, #104]	; (800096c <ConfigurarParametros+0x84>)
 8000902:	f000 fbf3 	bl	80010ec <Option_Input>
  Option_Input(&par->aviao.vx,     "VEL AVIAO",   1,  10);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0014 	add.w	r0, r3, #20
 800090c:	230a      	movs	r3, #10
 800090e:	2201      	movs	r2, #1
 8000910:	4917      	ldr	r1, [pc, #92]	; (8000970 <ConfigurarParametros+0x88>)
 8000912:	f000 fbeb 	bl	80010ec <Option_Input>
  Option_Input(&par->vento.forca,  "FORCA VENTO", 0,  5);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f103 0008 	add.w	r0, r3, #8
 800091c:	2305      	movs	r3, #5
 800091e:	2200      	movs	r2, #0
 8000920:	4914      	ldr	r1, [pc, #80]	; (8000974 <ConfigurarParametros+0x8c>)
 8000922:	f000 fbe3 	bl	80010ec <Option_Input>
  Option_Input(&par->vento.direcao,"DIR VENTO(0/1)",0,1);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f103 000c 	add.w	r0, r3, #12
 800092c:	2301      	movs	r3, #1
 800092e:	2200      	movs	r2, #0
 8000930:	4911      	ldr	r1, [pc, #68]	; (8000978 <ConfigurarParametros+0x90>)
 8000932:	f000 fbdb 	bl	80010ec <Option_Input>
  Option_Input(&par->tentativas_cfg,"TENTATIVAS", 1,  10);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	1d18      	adds	r0, r3, #4
 800093a:	230a      	movs	r3, #10
 800093c:	2201      	movs	r2, #1
 800093e:	490f      	ldr	r1, [pc, #60]	; (800097c <ConfigurarParametros+0x94>)
 8000940:	f000 fbd4 	bl	80010ec <Option_Input>

  // Peso e formato do pacote podem ser alterados também
  Option_Input(&par->pacote.peso,    "PESO(0L/1P)", 0, 1);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f103 0020 	add.w	r0, r3, #32
 800094a:	2301      	movs	r3, #1
 800094c:	2200      	movs	r2, #0
 800094e:	490c      	ldr	r1, [pc, #48]	; (8000980 <ConfigurarParametros+0x98>)
 8000950:	f000 fbcc 	bl	80010ec <Option_Input>
  Option_Input(&par->pacote.formato, "FORMATO(0Q/1+)", 0, 1);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800095a:	2301      	movs	r3, #1
 800095c:	2200      	movs	r2, #0
 800095e:	4909      	ldr	r1, [pc, #36]	; (8000984 <ConfigurarParametros+0x9c>)
 8000960:	f000 fbc4 	bl	80010ec <Option_Input>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	0800389c 	.word	0x0800389c
 8000970:	080038a4 	.word	0x080038a4
 8000974:	080038b0 	.word	0x080038b0
 8000978:	080038bc 	.word	0x080038bc
 800097c:	080038cc 	.word	0x080038cc
 8000980:	080038d8 	.word	0x080038d8
 8000984:	080038e4 	.word	0x080038e4

08000988 <ExecutarLancamento>:

void ExecutarLancamento(Parametros *par, Alvo *alvo, uint32_t *tempo_ms, int *xfinal, int *yfinal)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b095      	sub	sp, #84	; 0x54
 800098c:	af02      	add	r7, sp, #8
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	603b      	str	r3, [r7, #0]
    int aviao_x = 1;
 8000996:	2301      	movs	r3, #1
 8000998:	647b      	str	r3, [r7, #68]	; 0x44
    const int W = par->aviao.px_w;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    const int H = par->aviao.px_h;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	623b      	str	r3, [r7, #32]
    const int gnd_y = 75;
 80009a6:	234b      	movs	r3, #75	; 0x4b
 80009a8:	61fb      	str	r3, [r7, #28]

    ST7735_FillScreen(BLACK);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f001 f82a 	bl	8001a04 <ST7735_FillScreen>
    DesenharAlvo(alvo);
 80009b0:	68b8      	ldr	r0, [r7, #8]
 80009b2:	f000 fcc9 	bl	8001348 <DesenharAlvo>

    int drop_feito = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	643b      	str	r3, [r7, #64]	; 0x40
    int carga_x = 0, carga_y = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009be:	2300      	movs	r3, #0
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
    float vx = 0, vy = 0;   // velocidades da carga
 80009c2:	f04f 0300 	mov.w	r3, #0
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
 80009c8:	f04f 0300 	mov.w	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t t0 = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (int i = 0; i < 166; i += par->aviao.vx) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80009d6:	e0a0      	b.n	8000b1a <ExecutarLancamento+0x192>
        // move avião
        DesenharAviao(aviao_x, par->aviao.y, W, H, BLACK);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	6919      	ldr	r1, [r3, #16]
 80009dc:	2300      	movs	r3, #0
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	6a3b      	ldr	r3, [r7, #32]
 80009e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80009e6:	f000 fc67 	bl	80012b8 <DesenharAviao>
        aviao_x += par->aviao.vx;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009f0:	4413      	add	r3, r2
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44
        DesenharAviao(aviao_x, par->aviao.y, W, H, WHITE);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6919      	ldr	r1, [r3, #16]
 80009f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000a04:	f000 fc58 	bl	80012b8 <DesenharAviao>

        if (!drop_feito && aviao_x > 80) { // solta carga no meio da tela
 8000a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d118      	bne.n	8000a40 <ExecutarLancamento+0xb8>
 8000a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a10:	2b50      	cmp	r3, #80	; 0x50
 8000a12:	dd15      	ble.n	8000a40 <ExecutarLancamento+0xb8>
            drop_feito = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
            carga_x = aviao_x + W;
 8000a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	4413      	add	r3, r2
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
            carga_y = par->aviao.y;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
            vx = par->aviao.vx; // começa com a vel do avião
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fc48 	bl	80002c0 <__aeabi_i2f>
 8000a30:	4603      	mov	r3, r0
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
            vy = 0;
 8000a34:	f04f 0300 	mov.w	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
            t0 = HAL_GetTick();
 8000a3a:	f001 f947 	bl	8001ccc <HAL_GetTick>
 8000a3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        if (drop_feito) {
 8000a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d061      	beq.n	8000b0a <ExecutarLancamento+0x182>
            // limpa anterior
            ST7735_FillRectangle((int)carga_x, (int)carga_y, 3, 3, BLACK);
 8000a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a48:	b298      	uxth	r0, r3
 8000a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a4c:	b299      	uxth	r1, r3
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2303      	movs	r3, #3
 8000a54:	2203      	movs	r2, #3
 8000a56:	f000 ff61 	bl	800191c <ST7735_FillRectangle>

            // aplica gravidade (peso altera intensidade)
            float g = (par->pacote.peso == 0) ? 0.3f : 0.8f;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6a1b      	ldr	r3, [r3, #32]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <ExecutarLancamento+0xde>
 8000a62:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <ExecutarLancamento+0x1a4>)
 8000a64:	e000      	b.n	8000a68 <ExecutarLancamento+0xe0>
 8000a66:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <ExecutarLancamento+0x1a8>)
 8000a68:	61bb      	str	r3, [r7, #24]
            vy += g;
 8000a6a:	69b9      	ldr	r1, [r7, #24]
 8000a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a6e:	f7ff fb73 	bl	8000158 <__addsf3>
 8000a72:	4603      	mov	r3, r0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30

            // aplica vento (força altera aceleração horizontal)
            float vento = (par->vento.direcao == 0 ? -1 : 1) * (par->vento.forca * 0.2f);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <ExecutarLancamento+0xfa>
 8000a7e:	4c2d      	ldr	r4, [pc, #180]	; (8000b34 <ExecutarLancamento+0x1ac>)
 8000a80:	e001      	b.n	8000a86 <ExecutarLancamento+0xfe>
 8000a82:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fc18 	bl	80002c0 <__aeabi_i2f>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4929      	ldr	r1, [pc, #164]	; (8000b38 <ExecutarLancamento+0x1b0>)
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fc67 	bl	8000368 <__aeabi_fmul>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f7ff fc62 	bl	8000368 <__aeabi_fmul>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	617b      	str	r3, [r7, #20]
            vx += vento;
 8000aa8:	6979      	ldr	r1, [r7, #20]
 8000aaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000aac:	f7ff fb54 	bl	8000158 <__addsf3>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34

            // atualiza posição
            carga_x += (int)vx;
 8000ab4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ab6:	f7ff fda7 	bl	8000608 <__aeabi_f2iz>
 8000aba:	4602      	mov	r2, r0
 8000abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000abe:	4413      	add	r3, r2
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
            carga_y += (int)vy;
 8000ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ac4:	f7ff fda0 	bl	8000608 <__aeabi_f2iz>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000acc:	4413      	add	r3, r2
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38

            // desenha carga
            ST7735_FillRectangle((int)carga_x, (int)carga_y, 3, 3, RED);
 8000ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ad2:	b298      	uxth	r0, r3
 8000ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad6:	b299      	uxth	r1, r3
 8000ad8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2303      	movs	r3, #3
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	f000 ff1b 	bl	800191c <ST7735_FillRectangle>

            if (carga_y >= gnd_y) {
 8000ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	db0d      	blt.n	8000b0a <ExecutarLancamento+0x182>
                *xfinal = carga_x;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000af2:	601a      	str	r2, [r3, #0]
                *yfinal = gnd_y;
 8000af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	601a      	str	r2, [r3, #0]
                *tempo_ms = HAL_GetTick() - t0;
 8000afa:	f001 f8e7 	bl	8001ccc <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b02:	1ad2      	subs	r2, r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]
                break;
 8000b08:	e00b      	b.n	8000b22 <ExecutarLancamento+0x19a>
            }
        }
        HAL_Delay(40);
 8000b0a:	2028      	movs	r0, #40	; 0x28
 8000b0c:	f001 f8e8 	bl	8001ce0 <HAL_Delay>
    for (int i = 0; i < 166; i += par->aviao.vx) {
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b16:	4413      	add	r3, r2
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1c:	2ba5      	cmp	r3, #165	; 0xa5
 8000b1e:	f77f af5b 	ble.w	80009d8 <ExecutarLancamento+0x50>
    }
}
 8000b22:	bf00      	nop
 8000b24:	374c      	adds	r7, #76	; 0x4c
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	3e99999a 	.word	0x3e99999a
 8000b30:	3f4ccccd 	.word	0x3f4ccccd
 8000b34:	bf800000 	.word	0xbf800000
 8000b38:	3e4ccccd 	.word	0x3e4ccccd

08000b3c <AvaliarTentativa>:


uint8_t AvaliarTentativa(const Alvo *alvo, int ximpacto, int yimpacto)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b08d      	sub	sp, #52	; 0x34
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  // região útil do alvo na horizontal
  if (alvo->formato == 0) {
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d118      	bne.n	8000b82 <AvaliarTentativa+0x46>
    // QUADRADO: x em [alvo->x, alvo->x + lado]
    int lado = alvo->raio * 2;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
    if (yimpacto >= alvo->y && ximpacto >= alvo->x && ximpacto <= alvo->x + lado) return 1;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	db0d      	blt.n	8000b7e <AvaliarTentativa+0x42>
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	db08      	blt.n	8000b7e <AvaliarTentativa+0x42>
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	4413      	add	r3, r2
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	dc01      	bgt.n	8000b7e <AvaliarTentativa+0x42>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e050      	b.n	8000c20 <AvaliarTentativa+0xe4>
    return 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e04e      	b.n	8000c20 <AvaliarTentativa+0xe4>
  } else {
    // CRUZ: acerta se cair em uma das "barras"
    // barra horizontal
    int cx = alvo->x + alvo->raio;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int xh1 = alvo->x;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    int xh2 = alvo->x + alvo->raio*2;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    int yh = alvo->y; // linha do chão onde desenhamos a cruz
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	623b      	str	r3, [r7, #32]
    int hit_h = (yimpacto >= yh-1 && yimpacto <= yh+1 && ximpacto >= xh1 && ximpacto <= xh2);
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	db0e      	blt.n	8000bd0 <AvaliarTentativa+0x94>
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dc09      	bgt.n	8000bd0 <AvaliarTentativa+0x94>
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	db05      	blt.n	8000bd0 <AvaliarTentativa+0x94>
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dc01      	bgt.n	8000bd0 <AvaliarTentativa+0x94>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <AvaliarTentativa+0x96>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]

    // barra vertical (estreita em x ao redor de cx)
    int hit_v = (ximpacto >= cx-1 && ximpacto <= cx+1 && yimpacto >= yh - alvo->raio && yimpacto <= yh + alvo->raio);
 8000bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	db14      	blt.n	8000c08 <AvaliarTentativa+0xcc>
 8000bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be0:	3301      	adds	r3, #1
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dc0f      	bgt.n	8000c08 <AvaliarTentativa+0xcc>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	6a3a      	ldr	r2, [r7, #32]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	db08      	blt.n	8000c08 <AvaliarTentativa+0xcc>
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dc01      	bgt.n	8000c08 <AvaliarTentativa+0xcc>
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <AvaliarTentativa+0xce>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]

    return (hit_h || hit_v) ? 1 : 0;
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <AvaliarTentativa+0xdc>
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <AvaliarTentativa+0xe0>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <AvaliarTentativa+0xe2>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	b2db      	uxtb	r3, r3
  }
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3734      	adds	r7, #52	; 0x34
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
	...

08000c2c <RegistrarTentativa>:

void RegistrarTentativa(const Parametros *par, const Alvo *alvo, uint32_t tempo_ms, uint8_t acerto, int x0, int y0)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	70fb      	strb	r3, [r7, #3]
  if (g_tentativa_idx >= 3) return;
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <RegistrarTentativa+0x90>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d836      	bhi.n	8000cb0 <RegistrarTentativa+0x84>
  Tentativa *t = &g_tentativas[g_tentativa_idx++];
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <RegistrarTentativa+0x90>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	b2d1      	uxtb	r1, r2
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <RegistrarTentativa+0x90>)
 8000c4c:	7011      	strb	r1, [r2, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	232c      	movs	r3, #44	; 0x2c
 8000c52:	fb03 f302 	mul.w	r3, r3, r2
 8000c56:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <RegistrarTentativa+0x94>)
 8000c58:	4413      	add	r3, r2
 8000c5a:	617b      	str	r3, [r7, #20]
  t->x0 = x0;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	6a3a      	ldr	r2, [r7, #32]
 8000c60:	601a      	str	r2, [r3, #0]
  t->y0 = y0;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c66:	605a      	str	r2, [r3, #4]
  t->alvo_x = alvo->x;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	609a      	str	r2, [r3, #8]
  t->alvo_y = alvo->y;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	60da      	str	r2, [r3, #12]
  t->alvo_raio = alvo->raio;
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	611a      	str	r2, [r3, #16]
  t->vento_forca = par->vento.forca;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	615a      	str	r2, [r3, #20]
  t->vento_dir = par->vento.direcao;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	619a      	str	r2, [r3, #24]
  t->tempo_ms = tempo_ms;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  t->acerto = acerto;
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	78fa      	ldrb	r2, [r7, #3]
 8000c9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  t->peso = par->pacote.peso;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6a1a      	ldr	r2, [r3, #32]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	61da      	str	r2, [r3, #28]
  t->formato = par->pacote.formato;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	621a      	str	r2, [r3, #32]
 8000cae:	e000      	b.n	8000cb2 <RegistrarTentativa+0x86>
  if (g_tentativa_idx >= 3) return;
 8000cb0:	bf00      	nop
}
 8000cb2:	371c      	adds	r7, #28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000120 	.word	0x20000120
 8000cc0:	2000009c 	.word	0x2000009c

08000cc4 <ExibirResumoFinal>:

void ExibirResumoFinal(const Tentativa *reg, int n)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b097      	sub	sp, #92	; 0x5c
 8000cc8:	af04      	add	r7, sp, #16
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  int acertos = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t soma = 0, melhor = 0xFFFFFFFF;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c

  for (int i=0;i<n;i++){
 8000cdc:	2300      	movs	r3, #0
 8000cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ce0:	e02f      	b.n	8000d42 <ExibirResumoFinal+0x7e>
    acertos += reg[i].acerto ? 1 : 0;
 8000ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce4:	222c      	movs	r2, #44	; 0x2c
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf14      	ite	ne
 8000cf6:	2301      	movne	r3, #1
 8000cf8:	2300      	moveq	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d00:	4413      	add	r3, r2
 8000d02:	647b      	str	r3, [r7, #68]	; 0x44
    soma += reg[i].tempo_ms;
 8000d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d06:	222c      	movs	r2, #44	; 0x2c
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d14:	4413      	add	r3, r2
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
    if (reg[i].tempo_ms < melhor) melhor = reg[i].tempo_ms;
 8000d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d1a:	222c      	movs	r2, #44	; 0x2c
 8000d1c:	fb02 f303 	mul.w	r3, r2, r3
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d907      	bls.n	8000d3c <ExibirResumoFinal+0x78>
 8000d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d2e:	222c      	movs	r2, #44	; 0x2c
 8000d30:	fb02 f303 	mul.w	r3, r2, r3
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	4413      	add	r3, r2
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (int i=0;i<n;i++){
 8000d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d3e:	3301      	adds	r3, #1
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dbcb      	blt.n	8000ce2 <ExibirResumoFinal+0x1e>
  }
  uint32_t media = (n>0) ? (soma / (uint32_t)n) : 0;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	dd04      	ble.n	8000d5a <ExibirResumoFinal+0x96>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d58:	e000      	b.n	8000d5c <ExibirResumoFinal+0x98>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30

  ST7735_FillScreen(BLACK);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 fe50 	bl	8001a04 <ST7735_FillScreen>
  ST7735_WriteString(6, 2,  "RESUMO (3 SIMS)", Font_7x10, YELLOW, BLACK);
 8000d64:	4b52      	ldr	r3, [pc, #328]	; (8000eb0 <ExibirResumoFinal+0x1ec>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	9202      	str	r2, [sp, #8]
 8000d6a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000d6e:	9201      	str	r2, [sp, #4]
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	9200      	str	r2, [sp, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a4f      	ldr	r2, [pc, #316]	; (8000eb4 <ExibirResumoFinal+0x1f0>)
 8000d78:	2102      	movs	r1, #2
 8000d7a:	2006      	movs	r0, #6
 8000d7c:	f000 fd84 	bl	8001888 <ST7735_WriteString>

  char buf[32];
  sprintf(buf, "Acertos: %d/%d", acertos, n);
 8000d80:	f107 000c 	add.w	r0, r7, #12
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d88:	494b      	ldr	r1, [pc, #300]	; (8000eb8 <ExibirResumoFinal+0x1f4>)
 8000d8a:	f002 f9e1 	bl	8003150 <siprintf>
  ST7735_WriteString(6, 18, buf, Font_7x10, WHITE, BLACK);
 8000d8e:	4b48      	ldr	r3, [pc, #288]	; (8000eb0 <ExibirResumoFinal+0x1ec>)
 8000d90:	f107 010c 	add.w	r1, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	9202      	str	r2, [sp, #8]
 8000d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9c:	9201      	str	r2, [sp, #4]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	9200      	str	r2, [sp, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	460a      	mov	r2, r1
 8000da6:	2112      	movs	r1, #18
 8000da8:	2006      	movs	r0, #6
 8000daa:	f000 fd6d 	bl	8001888 <ST7735_WriteString>

  sprintf(buf, "Tempo medio: %lums", (unsigned long)media);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000db4:	4941      	ldr	r1, [pc, #260]	; (8000ebc <ExibirResumoFinal+0x1f8>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 f9ca 	bl	8003150 <siprintf>
  ST7735_WriteString(6, 30, buf, Font_7x10, WHITE, BLACK);
 8000dbc:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <ExibirResumoFinal+0x1ec>)
 8000dbe:	f107 010c 	add.w	r1, r7, #12
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	9202      	str	r2, [sp, #8]
 8000dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dca:	9201      	str	r2, [sp, #4]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	211e      	movs	r1, #30
 8000dd6:	2006      	movs	r0, #6
 8000dd8:	f000 fd56 	bl	8001888 <ST7735_WriteString>

  sprintf(buf, "Melhor tempo: %lums", (unsigned long)melhor);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000de2:	4937      	ldr	r1, [pc, #220]	; (8000ec0 <ExibirResumoFinal+0x1fc>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 f9b3 	bl	8003150 <siprintf>
  ST7735_WriteString(6, 42, buf, Font_7x10, WHITE, BLACK);
 8000dea:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <ExibirResumoFinal+0x1ec>)
 8000dec:	f107 010c 	add.w	r1, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	9202      	str	r2, [sp, #8]
 8000df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df8:	9201      	str	r2, [sp, #4]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	9200      	str	r2, [sp, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	460a      	mov	r2, r1
 8000e02:	212a      	movs	r1, #42	; 0x2a
 8000e04:	2006      	movs	r0, #6
 8000e06:	f000 fd3f 	bl	8001888 <ST7735_WriteString>

  // Lista compacta das 3 tentativas
  for (int i=0;i<n;i++){
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e0e:	e046      	b.n	8000e9e <ExibirResumoFinal+0x1da>
    int y = 58 + i*18;
 8000e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e12:	4613      	mov	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4413      	add	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	333a      	adds	r3, #58	; 0x3a
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sprintf(buf, "#%d %s  %lums", i+1, reg[i].acerto?"OK":"X", (unsigned long)reg[i].tempo_ms);
 8000e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e20:	1c59      	adds	r1, r3, #1
 8000e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e24:	222c      	movs	r2, #44	; 0x2c
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <ExibirResumoFinal+0x176>
 8000e36:	4c23      	ldr	r4, [pc, #140]	; (8000ec4 <ExibirResumoFinal+0x200>)
 8000e38:	e000      	b.n	8000e3c <ExibirResumoFinal+0x178>
 8000e3a:	4c23      	ldr	r4, [pc, #140]	; (8000ec8 <ExibirResumoFinal+0x204>)
 8000e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3e:	222c      	movs	r2, #44	; 0x2c
 8000e40:	fb02 f303 	mul.w	r3, r2, r3
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f107 000c 	add.w	r0, r7, #12
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	4623      	mov	r3, r4
 8000e52:	460a      	mov	r2, r1
 8000e54:	491d      	ldr	r1, [pc, #116]	; (8000ecc <ExibirResumoFinal+0x208>)
 8000e56:	f002 f97b 	bl	8003150 <siprintf>
    ST7735_WriteString(6, y, buf, Font_7x10, reg[i].acerto?GREEN:RED, BLACK);
 8000e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5c:	b298      	uxth	r0, r3
 8000e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e60:	222c      	movs	r2, #44	; 0x2c
 8000e62:	fb02 f303 	mul.w	r3, r2, r3
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <ExibirResumoFinal+0x1b4>
 8000e72:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e76:	e001      	b.n	8000e7c <ExibirResumoFinal+0x1b8>
 8000e78:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <ExibirResumoFinal+0x1ec>)
 8000e7e:	f107 040c 	add.w	r4, r7, #12
 8000e82:	2100      	movs	r1, #0
 8000e84:	9102      	str	r1, [sp, #8]
 8000e86:	9201      	str	r2, [sp, #4]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	9200      	str	r2, [sp, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4622      	mov	r2, r4
 8000e90:	4601      	mov	r1, r0
 8000e92:	2006      	movs	r0, #6
 8000e94:	f000 fcf8 	bl	8001888 <ST7735_WriteString>
  for (int i=0;i<n;i++){
 8000e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	dbb4      	blt.n	8000e10 <ExibirResumoFinal+0x14c>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	374c      	adds	r7, #76	; 0x4c
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	080038f4 	.word	0x080038f4
 8000eb8:	08003904 	.word	0x08003904
 8000ebc:	08003914 	.word	0x08003914
 8000ec0:	08003928 	.word	0x08003928
 8000ec4:	0800393c 	.word	0x0800393c
 8000ec8:	08003940 	.word	0x08003940
 8000ecc:	08003944 	.word	0x08003944

08000ed0 <MostrarTitulo>:


static void MostrarTitulo(const char *a, const char *b){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af04      	add	r7, sp, #16
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  ST7735_WriteString(20, 10, a, Font_7x10, GREEN, BLACK);
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <MostrarTitulo+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	9202      	str	r2, [sp, #8]
 8000ee0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000ee4:	9201      	str	r2, [sp, #4]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	9200      	str	r2, [sp, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	210a      	movs	r1, #10
 8000ef0:	2014      	movs	r0, #20
 8000ef2:	f000 fcc9 	bl	8001888 <ST7735_WriteString>
  ST7735_WriteString(20, 22, b, Font_7x10, GREEN, BLACK);
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MostrarTitulo+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	9202      	str	r2, [sp, #8]
 8000efc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000f00:	9201      	str	r2, [sp, #4]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	9200      	str	r2, [sp, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	2116      	movs	r1, #22
 8000f0c:	2014      	movs	r0, #20
 8000f0e:	f000 fcbb 	bl	8001888 <ST7735_WriteString>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000000 	.word	0x20000000

08000f20 <EsperaOK>:

static void EsperaOK(void){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  while (1){
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0) break;
 8000f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f28:	4806      	ldr	r0, [pc, #24]	; (8000f44 <EsperaOK+0x24>)
 8000f2a:	f001 f939 	bl	80021a0 <HAL_GPIO_ReadPin>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d000      	beq.n	8000f36 <EsperaOK+0x16>
 8000f34:	e7f6      	b.n	8000f24 <EsperaOK+0x4>
 8000f36:	bf00      	nop
  }
  HAL_Delay(200);
 8000f38:	20c8      	movs	r0, #200	; 0xc8
 8000f3a:	f000 fed1 	bl	8001ce0 <HAL_Delay>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40010800 	.word	0x40010800

08000f48 <MostrarResumoParametros>:

static void MostrarResumoParametros(const Parametros *par, int alvo_lado, const char *alvo_fmt_txt){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b092      	sub	sp, #72	; 0x48
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  ST7735_FillScreen(BLACK);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 fd55 	bl	8001a04 <ST7735_FillScreen>
  char b[34];

  sprintf(b,"Altura: %d", par->aviao.y);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4956      	ldr	r1, [pc, #344]	; (80010bc <MostrarResumoParametros+0x174>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 f8f3 	bl	8003150 <siprintf>
  ST7735_WriteString(4, 4, b, Font_7x10, WHITE, BLACK);
 8000f6a:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <MostrarResumoParametros+0x178>)
 8000f6c:	f107 0114 	add.w	r1, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	9202      	str	r2, [sp, #8]
 8000f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f78:	9201      	str	r2, [sp, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	9200      	str	r2, [sp, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	460a      	mov	r2, r1
 8000f82:	2104      	movs	r1, #4
 8000f84:	2004      	movs	r0, #4
 8000f86:	f000 fc7f 	bl	8001888 <ST7735_WriteString>
  sprintf(b,"Vel: %d", par->aviao.vx);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	494c      	ldr	r1, [pc, #304]	; (80010c4 <MostrarResumoParametros+0x17c>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 f8db 	bl	8003150 <siprintf>
  ST7735_WriteString(4, 16, b, Font_7x10, WHITE, BLACK);
 8000f9a:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <MostrarResumoParametros+0x178>)
 8000f9c:	f107 0114 	add.w	r1, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	9202      	str	r2, [sp, #8]
 8000fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa8:	9201      	str	r2, [sp, #4]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	9200      	str	r2, [sp, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 fc67 	bl	8001888 <ST7735_WriteString>

  sprintf(b,"Vento: %d", par->vento.forca);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4941      	ldr	r1, [pc, #260]	; (80010c8 <MostrarResumoParametros+0x180>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 f8c3 	bl	8003150 <siprintf>
  ST7735_WriteString(4, 28, b, Font_7x10, WHITE, BLACK);
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <MostrarResumoParametros+0x178>)
 8000fcc:	f107 0114 	add.w	r1, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	9202      	str	r2, [sp, #8]
 8000fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd8:	9201      	str	r2, [sp, #4]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	9200      	str	r2, [sp, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	211c      	movs	r1, #28
 8000fe4:	2004      	movs	r0, #4
 8000fe6:	f000 fc4f 	bl	8001888 <ST7735_WriteString>
  ST7735_WriteString(4, 40, par->vento.direcao? "Dir":"Esq", Font_7x10, WHITE, BLACK);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MostrarResumoParametros+0xae>
 8000ff2:	4936      	ldr	r1, [pc, #216]	; (80010cc <MostrarResumoParametros+0x184>)
 8000ff4:	e000      	b.n	8000ff8 <MostrarResumoParametros+0xb0>
 8000ff6:	4936      	ldr	r1, [pc, #216]	; (80010d0 <MostrarResumoParametros+0x188>)
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <MostrarResumoParametros+0x178>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	9202      	str	r2, [sp, #8]
 8000ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001002:	9201      	str	r2, [sp, #4]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	9200      	str	r2, [sp, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	460a      	mov	r2, r1
 800100c:	2128      	movs	r1, #40	; 0x28
 800100e:	2004      	movs	r0, #4
 8001010:	f000 fc3a 	bl	8001888 <ST7735_WriteString>

  ST7735_WriteString(4, 52, par->pacote.peso? "Pesado":"Leve", Font_7x10, YELLOW, BLACK);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MostrarResumoParametros+0xd8>
 800101c:	492d      	ldr	r1, [pc, #180]	; (80010d4 <MostrarResumoParametros+0x18c>)
 800101e:	e000      	b.n	8001022 <MostrarResumoParametros+0xda>
 8001020:	492d      	ldr	r1, [pc, #180]	; (80010d8 <MostrarResumoParametros+0x190>)
 8001022:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <MostrarResumoParametros+0x178>)
 8001024:	2200      	movs	r2, #0
 8001026:	9202      	str	r2, [sp, #8]
 8001028:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800102c:	9201      	str	r2, [sp, #4]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	460a      	mov	r2, r1
 8001036:	2134      	movs	r1, #52	; 0x34
 8001038:	2004      	movs	r0, #4
 800103a:	f000 fc25 	bl	8001888 <ST7735_WriteString>
  ST7735_WriteString(4, 64, par->pacote.formato? "Formato: Cruz":"Formato: Quad", Font_7x10, YELLOW, BLACK);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MostrarResumoParametros+0x102>
 8001046:	4925      	ldr	r1, [pc, #148]	; (80010dc <MostrarResumoParametros+0x194>)
 8001048:	e000      	b.n	800104c <MostrarResumoParametros+0x104>
 800104a:	4925      	ldr	r1, [pc, #148]	; (80010e0 <MostrarResumoParametros+0x198>)
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MostrarResumoParametros+0x178>)
 800104e:	2200      	movs	r2, #0
 8001050:	9202      	str	r2, [sp, #8]
 8001052:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001056:	9201      	str	r2, [sp, #4]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	460a      	mov	r2, r1
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	2004      	movs	r0, #4
 8001064:	f000 fc10 	bl	8001888 <ST7735_WriteString>

  sprintf(b,"Alvo: %s %dpx", alvo_fmt_txt, alvo_lado);
 8001068:	f107 0014 	add.w	r0, r7, #20
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	491c      	ldr	r1, [pc, #112]	; (80010e4 <MostrarResumoParametros+0x19c>)
 8001072:	f002 f86d 	bl	8003150 <siprintf>
  ST7735_WriteString(4, 78, b, Font_7x10, WHITE, BLACK);
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MostrarResumoParametros+0x178>)
 8001078:	f107 0114 	add.w	r1, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	9202      	str	r2, [sp, #8]
 8001080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001084:	9201      	str	r2, [sp, #4]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	9200      	str	r2, [sp, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	460a      	mov	r2, r1
 800108e:	214e      	movs	r1, #78	; 0x4e
 8001090:	2004      	movs	r0, #4
 8001092:	f000 fbf9 	bl	8001888 <ST7735_WriteString>

  ST7735_WriteString(4, 110, "PA12 CONFIRMA", Font_7x10, GREEN, BLACK);
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MostrarResumoParametros+0x178>)
 8001098:	2200      	movs	r2, #0
 800109a:	9202      	str	r2, [sp, #8]
 800109c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80010a0:	9201      	str	r2, [sp, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <MostrarResumoParametros+0x1a0>)
 80010aa:	216e      	movs	r1, #110	; 0x6e
 80010ac:	2004      	movs	r0, #4
 80010ae:	f000 fbeb 	bl	8001888 <ST7735_WriteString>
}
 80010b2:	bf00      	nop
 80010b4:	3738      	adds	r7, #56	; 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08003954 	.word	0x08003954
 80010c0:	20000000 	.word	0x20000000
 80010c4:	08003960 	.word	0x08003960
 80010c8:	08003968 	.word	0x08003968
 80010cc:	08003974 	.word	0x08003974
 80010d0:	08003978 	.word	0x08003978
 80010d4:	0800397c 	.word	0x0800397c
 80010d8:	08003984 	.word	0x08003984
 80010dc:	0800398c 	.word	0x0800398c
 80010e0:	0800399c 	.word	0x0800399c
 80010e4:	080039ac 	.word	0x080039ac
 80010e8:	080039bc 	.word	0x080039bc

080010ec <Option_Input>:

static void Option_Input(int *variable, const char *label, int minVal, int maxVal)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  int ok = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (!ok) {
 80010fe:	e0c2      	b.n	8001286 <Option_Input+0x19a>
    ST7735_FillScreen(BLACK);
 8001100:	2000      	movs	r0, #0
 8001102:	f000 fc7f 	bl	8001a04 <ST7735_FillScreen>
    char q[36];
    snprintf(q, sizeof(q), "QUAL/QNT %s", label);
 8001106:	f107 0010 	add.w	r0, r7, #16
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4a62      	ldr	r2, [pc, #392]	; (8001298 <Option_Input+0x1ac>)
 800110e:	2124      	movs	r1, #36	; 0x24
 8001110:	f001 ffea 	bl	80030e8 <sniprintf>
    ST7735_WriteString(5, 10, q, Font_7x10, GREEN, BLACK);
 8001114:	4b61      	ldr	r3, [pc, #388]	; (800129c <Option_Input+0x1b0>)
 8001116:	f107 0110 	add.w	r1, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	9202      	str	r2, [sp, #8]
 800111e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001122:	9201      	str	r2, [sp, #4]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	460a      	mov	r2, r1
 800112c:	210a      	movs	r1, #10
 800112e:	2005      	movs	r0, #5
 8001130:	f000 fbaa 	bl	8001888 <ST7735_WriteString>

    ST7735_WriteString(10, 35, "-", Font_11x18, GREEN, BLACK);
 8001134:	4b5a      	ldr	r3, [pc, #360]	; (80012a0 <Option_Input+0x1b4>)
 8001136:	2200      	movs	r2, #0
 8001138:	9202      	str	r2, [sp, #8]
 800113a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800113e:	9201      	str	r2, [sp, #4]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a57      	ldr	r2, [pc, #348]	; (80012a4 <Option_Input+0x1b8>)
 8001148:	2123      	movs	r1, #35	; 0x23
 800114a:	200a      	movs	r0, #10
 800114c:	f000 fb9c 	bl	8001888 <ST7735_WriteString>
    ST7735_WriteString(145, 40, "+", Font_11x18, GREEN, BLACK);
 8001150:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <Option_Input+0x1b4>)
 8001152:	2200      	movs	r2, #0
 8001154:	9202      	str	r2, [sp, #8]
 8001156:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	9200      	str	r2, [sp, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <Option_Input+0x1bc>)
 8001164:	2128      	movs	r1, #40	; 0x28
 8001166:	2091      	movs	r0, #145	; 0x91
 8001168:	f000 fb8e 	bl	8001888 <ST7735_WriteString>
    ST7735_WriteString(40, 70, "PA12 CONFIRMA", Font_7x10, GREEN, BLACK);
 800116c:	4b4b      	ldr	r3, [pc, #300]	; (800129c <Option_Input+0x1b0>)
 800116e:	2200      	movs	r2, #0
 8001170:	9202      	str	r2, [sp, #8]
 8001172:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001176:	9201      	str	r2, [sp, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	9200      	str	r2, [sp, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a4b      	ldr	r2, [pc, #300]	; (80012ac <Option_Input+0x1c0>)
 8001180:	2146      	movs	r1, #70	; 0x46
 8001182:	2028      	movs	r0, #40	; 0x28
 8001184:	f000 fb80 	bl	8001888 <ST7735_WriteString>

    char val[8];
    sprintf(val, "%2d", *variable);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001190:	4947      	ldr	r1, [pc, #284]	; (80012b0 <Option_Input+0x1c4>)
 8001192:	4618      	mov	r0, r3
 8001194:	f001 ffdc 	bl	8003150 <siprintf>
    ST7735_WriteString(65, 35, val, Font_11x18, GREEN, BLACK);
 8001198:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <Option_Input+0x1b4>)
 800119a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800119e:	2200      	movs	r2, #0
 80011a0:	9202      	str	r2, [sp, #8]
 80011a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011a6:	9201      	str	r2, [sp, #4]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	460a      	mov	r2, r1
 80011b0:	2123      	movs	r1, #35	; 0x23
 80011b2:	2041      	movs	r0, #65	; 0x41
 80011b4:	f000 fb68 	bl	8001888 <ST7735_WriteString>

    while (1){
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) { // -
 80011b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011bc:	483d      	ldr	r0, [pc, #244]	; (80012b4 <Option_Input+0x1c8>)
 80011be:	f000 ffef 	bl	80021a0 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d124      	bne.n	8001212 <Option_Input+0x126>
        if (*variable > minVal) (*variable)--;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	da04      	bge.n	80011dc <Option_Input+0xf0>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1e5a      	subs	r2, r3, #1
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	601a      	str	r2, [r3, #0]
        sprintf(val, "%2d", *variable);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011e4:	4932      	ldr	r1, [pc, #200]	; (80012b0 <Option_Input+0x1c4>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 ffb2 	bl	8003150 <siprintf>
        ST7735_WriteString(65, 35, val, Font_11x18, GREEN, BLACK);
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <Option_Input+0x1b4>)
 80011ee:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80011f2:	2200      	movs	r2, #0
 80011f4:	9202      	str	r2, [sp, #8]
 80011f6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011fa:	9201      	str	r2, [sp, #4]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	460a      	mov	r2, r1
 8001204:	2123      	movs	r1, #35	; 0x23
 8001206:	2041      	movs	r0, #65	; 0x41
 8001208:	f000 fb3e 	bl	8001888 <ST7735_WriteString>
        HAL_Delay(200);
 800120c:	20c8      	movs	r0, #200	; 0xc8
 800120e:	f000 fd67 	bl	8001ce0 <HAL_Delay>
      }
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0) { // +
 8001212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001216:	4827      	ldr	r0, [pc, #156]	; (80012b4 <Option_Input+0x1c8>)
 8001218:	f000 ffc2 	bl	80021a0 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d124      	bne.n	800126c <Option_Input+0x180>
        if (*variable < maxVal) (*variable)++;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	dd04      	ble.n	8001236 <Option_Input+0x14a>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	601a      	str	r2, [r3, #0]
        sprintf(val, "%2d", *variable);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800123e:	491c      	ldr	r1, [pc, #112]	; (80012b0 <Option_Input+0x1c4>)
 8001240:	4618      	mov	r0, r3
 8001242:	f001 ff85 	bl	8003150 <siprintf>
        ST7735_WriteString(65, 35, val, Font_11x18, GREEN, BLACK);
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <Option_Input+0x1b4>)
 8001248:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800124c:	2200      	movs	r2, #0
 800124e:	9202      	str	r2, [sp, #8]
 8001250:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001254:	9201      	str	r2, [sp, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	460a      	mov	r2, r1
 800125e:	2123      	movs	r1, #35	; 0x23
 8001260:	2041      	movs	r0, #65	; 0x41
 8001262:	f000 fb11 	bl	8001888 <ST7735_WriteString>
        HAL_Delay(200);
 8001266:	20c8      	movs	r0, #200	; 0xc8
 8001268:	f000 fd3a 	bl	8001ce0 <HAL_Delay>
      }
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0) { // OK
 800126c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <Option_Input+0x1c8>)
 8001272:	f000 ff95 	bl	80021a0 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d19d      	bne.n	80011b8 <Option_Input+0xcc>
        ok = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_Delay(200);
 8001280:	20c8      	movs	r0, #200	; 0xc8
 8001282:	f000 fd2d 	bl	8001ce0 <HAL_Delay>
  while (!ok) {
 8001286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001288:	2b00      	cmp	r3, #0
 800128a:	f43f af39 	beq.w	8001100 <Option_Input+0x14>
        break;
      }
    }
  }
}
 800128e:	bf00      	nop
 8001290:	3740      	adds	r7, #64	; 0x40
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	080039cc 	.word	0x080039cc
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000008 	.word	0x20000008
 80012a4:	080039d8 	.word	0x080039d8
 80012a8:	080039dc 	.word	0x080039dc
 80012ac:	080039bc 	.word	0x080039bc
 80012b0:	080039e0 	.word	0x080039e0
 80012b4:	40010800 	.word	0x40010800

080012b8 <DesenharAviao>:


static void DesenharAviao(int x, int y, int w, int h, uint16_t color){
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	603b      	str	r3, [r7, #0]
  ST7735_FillRectangle(x, y, w, h, color);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	b298      	uxth	r0, r3
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	b299      	uxth	r1, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b29c      	uxth	r4, r3
 80012d6:	8c3b      	ldrh	r3, [r7, #32]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4623      	mov	r3, r4
 80012dc:	f000 fb1e 	bl	800191c <ST7735_FillRectangle>
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd90      	pop	{r4, r7, pc}

080012e8 <DesenharCruz>:

static void DesenharCruz(int cx, int y, int raio, uint16_t color){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	807b      	strh	r3, [r7, #2]
  // barra horizontal no chão
  ST7735_FillRectangle(cx - raio, y, raio*2, 2, color);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	b298      	uxth	r0, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	b299      	uxth	r1, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	b29b      	uxth	r3, r3
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2302      	movs	r3, #2
 8001314:	f000 fb02 	bl	800191c <ST7735_FillRectangle>
  // barra vertical centrada
  ST7735_FillRectangle(cx - 1, y - raio, 2, raio*2, color);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	b29b      	uxth	r3, r3
 800131c:	3b01      	subs	r3, #1
 800131e:	b298      	uxth	r0, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	b29b      	uxth	r3, r3
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	b299      	uxth	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	b29b      	uxth	r3, r3
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4613      	mov	r3, r2
 800133a:	2202      	movs	r2, #2
 800133c:	f000 faee 	bl	800191c <ST7735_FillRectangle>
}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <DesenharAlvo>:

static void DesenharAlvo(const Alvo *alvo){
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
 800134e:	6078      	str	r0, [r7, #4]
  if (alvo->formato == 0){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d138      	bne.n	80013ca <DesenharAlvo+0x82>
    // quadrado
    ST7735_FillRectangle(alvo->x, alvo->y, alvo->raio*2, 2, WHITE); // borda no chão
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b298      	uxth	r0, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	b299      	uxth	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	b29b      	uxth	r3, r3
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	b29a      	uxth	r2, r3
 800136e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2302      	movs	r3, #2
 8001376:	f000 fad1 	bl	800191c <ST7735_FillRectangle>
    // colunas laterais pequenas (sinalização)
    ST7735_FillRectangle(alvo->x, alvo->y-2, 2, 2, WHITE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b298      	uxth	r0, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	b29b      	uxth	r3, r3
 8001386:	3b02      	subs	r3, #2
 8001388:	b299      	uxth	r1, r3
 800138a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2302      	movs	r3, #2
 8001392:	2202      	movs	r2, #2
 8001394:	f000 fac2 	bl	800191c <ST7735_FillRectangle>
    ST7735_FillRectangle(alvo->x + alvo->raio*2 - 2, alvo->y-2, 2, 2, WHITE);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	3b02      	subs	r3, #2
 80013ae:	b298      	uxth	r0, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	3b02      	subs	r3, #2
 80013b8:	b299      	uxth	r1, r3
 80013ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2302      	movs	r3, #2
 80013c2:	2202      	movs	r2, #2
 80013c4:	f000 faaa 	bl	800191c <ST7735_FillRectangle>
  } else {
    // cruz
    int cx = alvo->x + alvo->raio;
    DesenharCruz(cx, alvo->y, alvo->raio, WHITE);
  }
}
 80013c8:	e00e      	b.n	80013e8 <DesenharAlvo+0xa0>
    int cx = alvo->x + alvo->raio;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
    DesenharCruz(cx, alvo->y, alvo->raio, WHITE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6859      	ldr	r1, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff ff80 	bl	80012e8 <DesenharCruz>
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b090      	sub	sp, #64	; 0x40
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0318 	add.w	r3, r7, #24
 80013fa:	2228      	movs	r2, #40	; 0x28
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fd80 	bl	8002f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001416:	2301      	movs	r3, #1
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141a:	2310      	movs	r3, #16
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f000 feea 	bl	8002200 <HAL_RCC_OscConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x46>
 8001432:	f000 f8b1 	bl	8001598 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) { Error_Handler(); }
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f001 f956 	bl	8002700 <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x6e>
 800145a:	f000 f89d 	bl	8001598 <Error_Handler>
}
 800145e:	bf00      	nop
 8001460:	3740      	adds	r7, #64	; 0x40
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_SPI1_Init+0x68>)
 800146e:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <MX_SPI1_Init+0x6c>)
 8001470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_SPI1_Init+0x68>)
 8001474:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_SPI1_Init+0x68>)
 800147c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001480:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_SPI1_Init+0x68>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_SPI1_Init+0x68>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_SPI1_Init+0x68>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_SPI1_Init+0x68>)
 8001496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_SPI1_Init+0x68>)
 800149e:	2220      	movs	r2, #32
 80014a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_SPI1_Init+0x68>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_SPI1_Init+0x68>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_SPI1_Init+0x68>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_SPI1_Init+0x68>)
 80014b6:	220a      	movs	r2, #10
 80014b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) { Error_Handler(); }
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_SPI1_Init+0x68>)
 80014bc:	f001 fa8a 	bl	80029d4 <HAL_SPI_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_SPI1_Init+0x62>
 80014c6:	f000 f867 	bl	8001598 <Error_Handler>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000130 	.word	0x20000130
 80014d4:	40013000 	.word	0x40013000

080014d8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <MX_GPIO_Init+0xb4>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a26      	ldr	r2, [pc, #152]	; (800158c <MX_GPIO_Init+0xb4>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <MX_GPIO_Init+0xb4>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_GPIO_Init+0xb4>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a20      	ldr	r2, [pc, #128]	; (800158c <MX_GPIO_Init+0xb4>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_GPIO_Init+0xb4>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2110      	movs	r1, #16
 8001520:	481b      	ldr	r0, [pc, #108]	; (8001590 <MX_GPIO_Init+0xb8>)
 8001522:	f000 fe54 	bl	80021ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2103      	movs	r1, #3
 800152a:	481a      	ldr	r0, [pc, #104]	; (8001594 <MX_GPIO_Init+0xbc>)
 800152c:	f000 fe4f 	bl	80021ce <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 8001530:	2310      	movs	r3, #16
 8001532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2302      	movs	r3, #2
 800153e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4619      	mov	r1, r3
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <MX_GPIO_Init+0xb8>)
 8001548:	f000 fcd0 	bl	8001eec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin;
 800154c:	2303      	movs	r3, #3
 800154e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2302      	movs	r3, #2
 800155a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	4619      	mov	r1, r3
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_GPIO_Init+0xbc>)
 8001564:	f000 fcc2 	bl	8001eec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001568:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800156c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001572:	2301      	movs	r3, #1
 8001574:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4619      	mov	r1, r3
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_GPIO_Init+0xb8>)
 800157e:	f000 fcb5 	bl	8001eec <HAL_GPIO_Init>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	40010800 	.word	0x40010800
 8001594:	40010c00 	.word	0x40010c00

08001598 <Error_Handler>:

void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
  __disable_irq();
  while (1) { }
 800159e:	e7fe      	b.n	800159e <Error_Handler+0x6>

080015a0 <ST7735_Select>:
    ST7735_NORON  ,    Delay, //  3: Normal display on, no args, w/HAL_Delay
      10,                     //     10 ms HAL_Delay
    ST7735_DISPON ,    Delay, //  4: Main screen turn on, no args w/HAL_Delay
      100 };                  //     100 ms HAL_Delay

static void ST7735_Select() {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <ST7735_Select+0x14>)
 80015aa:	f000 fe10 	bl	80021ce <HAL_GPIO_WritePin>
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40010800 	.word	0x40010800

080015b8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	2110      	movs	r1, #16
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <ST7735_Unselect+0x14>)
 80015c2:	f000 fe04 	bl	80021ce <HAL_GPIO_WritePin>
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40010800 	.word	0x40010800

080015d0 <ST7735_Reset>:

static void ST7735_Reset() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2102      	movs	r1, #2
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <ST7735_Reset+0x24>)
 80015da:	f000 fdf8 	bl	80021ce <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80015de:	2005      	movs	r0, #5
 80015e0:	f000 fb7e 	bl	8001ce0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2102      	movs	r1, #2
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <ST7735_Reset+0x24>)
 80015ea:	f000 fdf0 	bl	80021ce <HAL_GPIO_WritePin>
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40010c00 	.word	0x40010c00

080015f8 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2101      	movs	r1, #1
 8001606:	4807      	ldr	r0, [pc, #28]	; (8001624 <ST7735_WriteCommand+0x2c>)
 8001608:	f000 fde1 	bl	80021ce <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800160c:	1df9      	adds	r1, r7, #7
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	2201      	movs	r2, #1
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <ST7735_WriteCommand+0x30>)
 8001616:	f001 fa61 	bl	8002adc <HAL_SPI_Transmit>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40010c00 	.word	0x40010c00
 8001628:	20000130 	.word	0x20000130

0800162c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2101      	movs	r1, #1
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <ST7735_WriteData+0x2c>)
 800163c:	f000 fdc7 	bl	80021ce <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b29a      	uxth	r2, r3
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <ST7735_WriteData+0x30>)
 800164c:	f001 fa46 	bl	8002adc <HAL_SPI_Transmit>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010c00 	.word	0x40010c00
 800165c:	20000130 	.word	0x20000130

08001660 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001672:	e034      	b.n	80016de <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800167e:	7afb      	ldrb	r3, [r7, #11]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ffb9 	bl	80015f8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, HAL_Delay follows args
        ms = numArgs & Delay;
 8001690:	7abb      	ldrb	r3, [r7, #10]
 8001692:	b29b      	uxth	r3, r3
 8001694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001698:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~Delay;
 800169a:	7abb      	ldrb	r3, [r7, #10]
 800169c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016a0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80016a2:	7abb      	ldrb	r3, [r7, #10]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80016a8:	7abb      	ldrb	r3, [r7, #10]
 80016aa:	4619      	mov	r1, r3
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ffbd 	bl	800162c <ST7735_WriteData>
            addr += numArgs;
 80016b2:	7abb      	ldrb	r3, [r7, #10]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80016ba:	89bb      	ldrh	r3, [r7, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00e      	beq.n	80016de <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80016ca:	89bb      	ldrh	r3, [r7, #12]
 80016cc:	2bff      	cmp	r3, #255	; 0xff
 80016ce:	d102      	bne.n	80016d6 <ST7735_ExecuteCommandList+0x76>
 80016d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016d4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80016d6:	89bb      	ldrh	r3, [r7, #12]
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fb01 	bl	8001ce0 <HAL_Delay>
    while(numCommands--) {
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	73fa      	strb	r2, [r7, #15]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1c5      	bne.n	8001674 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4604      	mov	r4, r0
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4623      	mov	r3, r4
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	4603      	mov	r3, r0
 8001704:	71bb      	strb	r3, [r7, #6]
 8001706:	460b      	mov	r3, r1
 8001708:	717b      	strb	r3, [r7, #5]
 800170a:	4613      	mov	r3, r2
 800170c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800170e:	202a      	movs	r0, #42	; 0x2a
 8001710:	f7ff ff72 	bl	80015f8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001714:	2300      	movs	r3, #0
 8001716:	733b      	strb	r3, [r7, #12]
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	3301      	adds	r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	737b      	strb	r3, [r7, #13]
 8001720:	2300      	movs	r3, #0
 8001722:	73bb      	strb	r3, [r7, #14]
 8001724:	797b      	ldrb	r3, [r7, #5]
 8001726:	3301      	adds	r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	2104      	movs	r1, #4
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff7a 	bl	800162c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001738:	202b      	movs	r0, #43	; 0x2b
 800173a:	f7ff ff5d 	bl	80015f8 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	331a      	adds	r3, #26
 8001742:	b2db      	uxtb	r3, r3
 8001744:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001746:	793b      	ldrb	r3, [r7, #4]
 8001748:	331a      	adds	r3, #26
 800174a:	b2db      	uxtb	r3, r3
 800174c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2104      	movs	r1, #4
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff69 	bl	800162c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800175a:	202c      	movs	r0, #44	; 0x2c
 800175c:	f7ff ff4c 	bl	80015f8 <ST7735_WriteCommand>
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bd90      	pop	{r4, r7, pc}

08001768 <ST7735_Init>:

void ST7735_Init() {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    ST7735_Select();
 800176c:	f7ff ff18 	bl	80015a0 <ST7735_Select>
    ST7735_Reset();
 8001770:	f7ff ff2e 	bl	80015d0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <ST7735_Init+0x28>)
 8001776:	f7ff ff73 	bl	8001660 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <ST7735_Init+0x2c>)
 800177c:	f7ff ff70 	bl	8001660 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <ST7735_Init+0x30>)
 8001782:	f7ff ff6d 	bl	8001660 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001786:	f7ff ff17 	bl	80015b8 <ST7735_Unselect>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	08004ec0 	.word	0x08004ec0
 8001794:	08004efc 	.word	0x08004efc
 8001798:	08004f0c 	.word	0x08004f0c

0800179c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800179c:	b082      	sub	sp, #8
 800179e:	b590      	push	{r4, r7, lr}
 80017a0:	b089      	sub	sp, #36	; 0x24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
 80017aa:	460b      	mov	r3, r1
 80017ac:	80bb      	strh	r3, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	b2d8      	uxtb	r0, r3
 80017b6:	88bb      	ldrh	r3, [r7, #4]
 80017b8:	b2d9      	uxtb	r1, r3
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80017c2:	4413      	add	r3, r2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2dc      	uxtb	r4, r3
 80017ca:	88bb      	ldrh	r3, [r7, #4]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80017d2:	4413      	add	r3, r2
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4622      	mov	r2, r4
 80017dc:	f7ff ff88 	bl	80016f0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	e043      	b.n	800186e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80017e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	3b20      	subs	r3, #32
 80017ec:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	4619      	mov	r1, r3
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	440b      	add	r3, r1
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	e029      	b.n	800185c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00e      	beq.n	8001836 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001818:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b29b      	uxth	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	743b      	strb	r3, [r7, #16]
 8001822:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001824:	b2db      	uxtb	r3, r3
 8001826:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	2102      	movs	r1, #2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fefc 	bl	800162c <ST7735_WriteData>
 8001834:	e00f      	b.n	8001856 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001836:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	b29b      	uxth	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	733b      	strb	r3, [r7, #12]
 8001842:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001846:	b2db      	uxtb	r3, r3
 8001848:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	2102      	movs	r1, #2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff feeb 	bl	800162c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	3301      	adds	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001860:	461a      	mov	r2, r3
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4293      	cmp	r3, r2
 8001866:	d3cf      	bcc.n	8001808 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	3301      	adds	r3, #1
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001872:	461a      	mov	r2, r3
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	4293      	cmp	r3, r2
 8001878:	d3b5      	bcc.n	80017e6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800187a:	bf00      	nop
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001884:	b002      	add	sp, #8
 8001886:	4770      	bx	lr

08001888 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001888:	b082      	sub	sp, #8
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af04      	add	r7, sp, #16
 8001890:	603a      	str	r2, [r7, #0]
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	4603      	mov	r3, r0
 8001896:	80fb      	strh	r3, [r7, #6]
 8001898:	460b      	mov	r3, r1
 800189a:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800189c:	f7ff fe80 	bl	80015a0 <ST7735_Select>

    while(*str) {
 80018a0:	e02d      	b.n	80018fe <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	7d3a      	ldrb	r2, [r7, #20]
 80018a6:	4413      	add	r3, r2
 80018a8:	2b9f      	cmp	r3, #159	; 0x9f
 80018aa:	dd13      	ble.n	80018d4 <ST7735_WriteString+0x4c>
            x = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80018b0:	7d7b      	ldrb	r3, [r7, #21]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	88bb      	ldrh	r3, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	7d7a      	ldrb	r2, [r7, #21]
 80018be:	4413      	add	r3, r2
 80018c0:	2b4f      	cmp	r3, #79	; 0x4f
 80018c2:	dc21      	bgt.n	8001908 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d103      	bne.n	80018d4 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	603b      	str	r3, [r7, #0]
                continue;
 80018d2:	e014      	b.n	80018fe <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	88b9      	ldrh	r1, [r7, #4]
 80018da:	88f8      	ldrh	r0, [r7, #6]
 80018dc:	8c3b      	ldrh	r3, [r7, #32]
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	8bbb      	ldrh	r3, [r7, #28]
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f7ff ff57 	bl	800179c <ST7735_WriteChar>
        x += font.width;
 80018ee:	7d3b      	ldrb	r3, [r7, #20]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	4413      	add	r3, r2
 80018f6:	80fb      	strh	r3, [r7, #6]
        str++;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1cd      	bne.n	80018a2 <ST7735_WriteString+0x1a>
 8001906:	e000      	b.n	800190a <ST7735_WriteString+0x82>
                break;
 8001908:	bf00      	nop
    }

    ST7735_Unselect();
 800190a:	f7ff fe55 	bl	80015b8 <ST7735_Unselect>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001918:	b002      	add	sp, #8
 800191a:	4770      	bx	lr

0800191c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	4604      	mov	r4, r0
 8001924:	4608      	mov	r0, r1
 8001926:	4611      	mov	r1, r2
 8001928:	461a      	mov	r2, r3
 800192a:	4623      	mov	r3, r4
 800192c:	80fb      	strh	r3, [r7, #6]
 800192e:	4603      	mov	r3, r0
 8001930:	80bb      	strh	r3, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
 8001936:	4613      	mov	r3, r2
 8001938:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	2b9f      	cmp	r3, #159	; 0x9f
 800193e:	d859      	bhi.n	80019f4 <ST7735_FillRectangle+0xd8>
 8001940:	88bb      	ldrh	r3, [r7, #4]
 8001942:	2b4f      	cmp	r3, #79	; 0x4f
 8001944:	d856      	bhi.n	80019f4 <ST7735_FillRectangle+0xd8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	4413      	add	r3, r2
 800194c:	3b01      	subs	r3, #1
 800194e:	2b9f      	cmp	r3, #159	; 0x9f
 8001950:	dd03      	ble.n	800195a <ST7735_FillRectangle+0x3e>
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001958:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800195a:	88ba      	ldrh	r2, [r7, #4]
 800195c:	883b      	ldrh	r3, [r7, #0]
 800195e:	4413      	add	r3, r2
 8001960:	3b01      	subs	r3, #1
 8001962:	2b4f      	cmp	r3, #79	; 0x4f
 8001964:	dd03      	ble.n	800196e <ST7735_FillRectangle+0x52>
 8001966:	88bb      	ldrh	r3, [r7, #4]
 8001968:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800196c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800196e:	f7ff fe17 	bl	80015a0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	b2d8      	uxtb	r0, r3
 8001976:	88bb      	ldrh	r3, [r7, #4]
 8001978:	b2d9      	uxtb	r1, r3
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4413      	add	r3, r2
 8001984:	b2db      	uxtb	r3, r3
 8001986:	3b01      	subs	r3, #1
 8001988:	b2dc      	uxtb	r4, r3
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	883b      	ldrh	r3, [r7, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4413      	add	r3, r2
 8001994:	b2db      	uxtb	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	4622      	mov	r2, r4
 800199c:	f7ff fea8 	bl	80016f0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80019a0:	8c3b      	ldrh	r3, [r7, #32]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	733b      	strb	r3, [r7, #12]
 80019aa:	8c3b      	ldrh	r3, [r7, #32]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2101      	movs	r1, #1
 80019b4:	4811      	ldr	r0, [pc, #68]	; (80019fc <ST7735_FillRectangle+0xe0>)
 80019b6:	f000 fc0a 	bl	80021ce <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80019ba:	883b      	ldrh	r3, [r7, #0]
 80019bc:	80bb      	strh	r3, [r7, #4]
 80019be:	e013      	b.n	80019e8 <ST7735_FillRectangle+0xcc>
        for(x = w; x > 0; x--) {
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	80fb      	strh	r3, [r7, #6]
 80019c4:	e00a      	b.n	80019dc <ST7735_FillRectangle+0xc0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80019c6:	f107 010c 	add.w	r1, r7, #12
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	2202      	movs	r2, #2
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <ST7735_FillRectangle+0xe4>)
 80019d2:	f001 f883 	bl	8002adc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	3b01      	subs	r3, #1
 80019da:	80fb      	strh	r3, [r7, #6]
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f1      	bne.n	80019c6 <ST7735_FillRectangle+0xaa>
    for(y = h; y > 0; y--) {
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	80bb      	strh	r3, [r7, #4]
 80019e8:	88bb      	ldrh	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1e8      	bne.n	80019c0 <ST7735_FillRectangle+0xa4>
        }
    }

    ST7735_Unselect();
 80019ee:	f7ff fde3 	bl	80015b8 <ST7735_Unselect>
 80019f2:	e000      	b.n	80019f6 <ST7735_FillRectangle+0xda>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80019f4:	bf00      	nop
}
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	40010c00 	.word	0x40010c00
 8001a00:	20000130 	.word	0x20000130

08001a04 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2350      	movs	r3, #80	; 0x50
 8001a14:	22a0      	movs	r2, #160	; 0xa0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff ff7f 	bl	800191c <ST7735_FillRectangle>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6193      	str	r3, [r2, #24]
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_MspInit+0x60>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_MspInit+0x60>)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000

08001a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <HAL_SPI_MspInit+0x70>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d123      	bne.n	8001af4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_SPI_MspInit+0x74>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a13      	ldr	r2, [pc, #76]	; (8001b00 <HAL_SPI_MspInit+0x74>)
 8001ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_SPI_MspInit+0x74>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_SPI_MspInit+0x74>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_SPI_MspInit+0x74>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_SPI_MspInit+0x74>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001adc:	23a0      	movs	r3, #160	; 0xa0
 8001ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	4619      	mov	r1, r3
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <HAL_SPI_MspInit+0x78>)
 8001af0:	f000 f9fc 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40013000 	.word	0x40013000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010800 	.word	0x40010800

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <NMI_Handler+0x4>

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4e:	f000 f8ab 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f001 f98a 	bl	8002ea0 <__errno>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	230c      	movs	r3, #12
 8001b90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20005000 	.word	0x20005000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	20000124 	.word	0x20000124
 8001bc0:	20000190 	.word	0x20000190

08001bc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	; (8001c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	; (8001c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bf6:	f7ff ffe5 	bl	8001bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f001 f957 	bl	8002eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfe:	f7fe fd29 	bl	8000654 <main>
  bx lr
 8001c02:	4770      	bx	lr
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001c0c:	08004f84 	.word	0x08004f84
  ldr r2, =_sbss
 8001c10:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c14:	20000190 	.word	0x20000190

08001c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_2_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_Init+0x28>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x28>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f929 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 f808 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fef6 	bl	8001a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x54>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x58>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f933 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f909 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <HAL_InitTick+0x5c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000010 	.word	0x20000010
 8001ca0:	20000018 	.word	0x20000018
 8001ca4:	20000014 	.word	0x20000014

08001ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x1c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	20000018 	.word	0x20000018
 8001cc8:	20000188 	.word	0x20000188

08001ccc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_GetTick+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	20000188 	.word	0x20000188

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff fff0 	bl	8001ccc <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_Delay+0x40>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffe0 	bl	8001ccc <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000018 	.word	0x20000018

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	; (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff90 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff49 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff5e 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff90 	bl	8001ddc <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5f 	bl	8001d88 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffb0 	bl	8001e40 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b08b      	sub	sp, #44	; 0x2c
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efe:	e127      	b.n	8002150 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f00:	2201      	movs	r2, #1
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	f040 8116 	bne.w	800214a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b12      	cmp	r3, #18
 8001f24:	d034      	beq.n	8001f90 <HAL_GPIO_Init+0xa4>
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d80d      	bhi.n	8001f46 <HAL_GPIO_Init+0x5a>
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x9a>
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d804      	bhi.n	8001f3c <HAL_GPIO_Init+0x50>
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d031      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d01c      	beq.n	8001f74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f3a:	e048      	b.n	8001fce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d043      	beq.n	8001fc8 <HAL_GPIO_Init+0xdc>
 8001f40:	2b11      	cmp	r3, #17
 8001f42:	d01b      	beq.n	8001f7c <HAL_GPIO_Init+0x90>
          break;
 8001f44:	e043      	b.n	8001fce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f46:	4a89      	ldr	r2, [pc, #548]	; (800216c <HAL_GPIO_Init+0x280>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d026      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
 8001f4c:	4a87      	ldr	r2, [pc, #540]	; (800216c <HAL_GPIO_Init+0x280>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d806      	bhi.n	8001f60 <HAL_GPIO_Init+0x74>
 8001f52:	4a87      	ldr	r2, [pc, #540]	; (8002170 <HAL_GPIO_Init+0x284>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d020      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
 8001f58:	4a86      	ldr	r2, [pc, #536]	; (8002174 <HAL_GPIO_Init+0x288>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01d      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
          break;
 8001f5e:	e036      	b.n	8001fce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f60:	4a85      	ldr	r2, [pc, #532]	; (8002178 <HAL_GPIO_Init+0x28c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d019      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
 8001f66:	4a85      	ldr	r2, [pc, #532]	; (800217c <HAL_GPIO_Init+0x290>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d016      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
 8001f6c:	4a84      	ldr	r2, [pc, #528]	; (8002180 <HAL_GPIO_Init+0x294>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
          break;
 8001f72:	e02c      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e028      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	3304      	adds	r3, #4
 8001f82:	623b      	str	r3, [r7, #32]
          break;
 8001f84:	e023      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e01e      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	330c      	adds	r3, #12
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e019      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e012      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	611a      	str	r2, [r3, #16]
          break;
 8001fba:	e008      	b.n	8001fce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	615a      	str	r2, [r3, #20]
          break;
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
          break;
 8001fcc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2bff      	cmp	r3, #255	; 0xff
 8001fd2:	d801      	bhi.n	8001fd8 <HAL_GPIO_Init+0xec>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	e001      	b.n	8001fdc <HAL_GPIO_Init+0xf0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2bff      	cmp	r3, #255	; 0xff
 8001fe2:	d802      	bhi.n	8001fea <HAL_GPIO_Init+0xfe>
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x104>
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	3b08      	subs	r3, #8
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	401a      	ands	r2, r3
 8002002:	6a39      	ldr	r1, [r7, #32]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	431a      	orrs	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8096 	beq.w	800214a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800201e:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_GPIO_Init+0x298>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_GPIO_Init+0x298>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6193      	str	r3, [r2, #24]
 800202a:	4b56      	ldr	r3, [pc, #344]	; (8002184 <HAL_GPIO_Init+0x298>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002036:	4a54      	ldr	r2, [pc, #336]	; (8002188 <HAL_GPIO_Init+0x29c>)
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4b      	ldr	r2, [pc, #300]	; (800218c <HAL_GPIO_Init+0x2a0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x19e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4a      	ldr	r2, [pc, #296]	; (8002190 <HAL_GPIO_Init+0x2a4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x19a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_GPIO_Init+0x2a8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x196>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a48      	ldr	r2, [pc, #288]	; (8002198 <HAL_GPIO_Init+0x2ac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x192>
 800207a:	2303      	movs	r3, #3
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x1a0>
 800207e:	2304      	movs	r3, #4
 8002080:	e004      	b.n	800208c <HAL_GPIO_Init+0x1a0>
 8002082:	2302      	movs	r3, #2
 8002084:	e002      	b.n	800208c <HAL_GPIO_Init+0x1a0>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_GPIO_Init+0x1a0>
 800208a:	2300      	movs	r3, #0
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	f002 0203 	and.w	r2, r2, #3
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4093      	lsls	r3, r2
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800209c:	493a      	ldr	r1, [pc, #232]	; (8002188 <HAL_GPIO_Init+0x29c>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4938      	ldr	r1, [pc, #224]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
 80020c2:	e006      	b.n	80020d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4933      	ldr	r1, [pc, #204]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020de:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	492e      	ldr	r1, [pc, #184]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
 80020ea:	e006      	b.n	80020fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ec:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4929      	ldr	r1, [pc, #164]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002106:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_GPIO_Init+0x2b0>)
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	4924      	ldr	r1, [pc, #144]	; (800219c <HAL_GPIO_Init+0x2b0>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
 8002112:	e006      	b.n	8002122 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_GPIO_Init+0x2b0>)
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	43db      	mvns	r3, r3
 800211c:	491f      	ldr	r1, [pc, #124]	; (800219c <HAL_GPIO_Init+0x2b0>)
 800211e:	4013      	ands	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_GPIO_Init+0x2b0>)
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	491a      	ldr	r1, [pc, #104]	; (800219c <HAL_GPIO_Init+0x2b0>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	60cb      	str	r3, [r1, #12]
 800213a:	e006      	b.n	800214a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_GPIO_Init+0x2b0>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	43db      	mvns	r3, r3
 8002144:	4915      	ldr	r1, [pc, #84]	; (800219c <HAL_GPIO_Init+0x2b0>)
 8002146:	4013      	ands	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	3301      	adds	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	f47f aed0 	bne.w	8001f00 <HAL_GPIO_Init+0x14>
  }
}
 8002160:	bf00      	nop
 8002162:	372c      	adds	r7, #44	; 0x2c
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	10210000 	.word	0x10210000
 8002170:	10110000 	.word	0x10110000
 8002174:	10120000 	.word	0x10120000
 8002178:	10310000 	.word	0x10310000
 800217c:	10320000 	.word	0x10320000
 8002180:	10220000 	.word	0x10220000
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	40010800 	.word	0x40010800
 8002190:	40010c00 	.word	0x40010c00
 8002194:	40011000 	.word	0x40011000
 8002198:	40011400 	.word	0x40011400
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e001      	b.n	80021c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	807b      	strh	r3, [r7, #2]
 80021da:	4613      	mov	r3, r2
 80021dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021de:	787b      	ldrb	r3, [r7, #1]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e4:	887a      	ldrh	r2, [r7, #2]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ea:	e003      	b.n	80021f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	041a      	lsls	r2, r3, #16
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	611a      	str	r2, [r3, #16]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e26c      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8087 	beq.w	800232e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002220:	4b92      	ldr	r3, [pc, #584]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b04      	cmp	r3, #4
 800222a:	d00c      	beq.n	8002246 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800222c:	4b8f      	ldr	r3, [pc, #572]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d112      	bne.n	800225e <HAL_RCC_OscConfig+0x5e>
 8002238:	4b8c      	ldr	r3, [pc, #560]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d10b      	bne.n	800225e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	4b89      	ldr	r3, [pc, #548]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d06c      	beq.n	800232c <HAL_RCC_OscConfig+0x12c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d168      	bne.n	800232c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e246      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x76>
 8002268:	4b80      	ldr	r3, [pc, #512]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a7f      	ldr	r2, [pc, #508]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e02e      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x98>
 800227e:	4b7b      	ldr	r3, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a7a      	ldr	r2, [pc, #488]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b78      	ldr	r3, [pc, #480]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a77      	ldr	r2, [pc, #476]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0xbc>
 80022a2:	4b72      	ldr	r3, [pc, #456]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a71      	ldr	r2, [pc, #452]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b6f      	ldr	r3, [pc, #444]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6e      	ldr	r2, [pc, #440]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 80022bc:	4b6b      	ldr	r3, [pc, #428]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6a      	ldr	r2, [pc, #424]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a67      	ldr	r2, [pc, #412]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fcf6 	bl	8001ccc <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fcf2 	bl	8001ccc <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1fa      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b5d      	ldr	r3, [pc, #372]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xe4>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fce2 	bl	8001ccc <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fcde 	bl	8001ccc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1e6      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x10c>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233a:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002346:	4b49      	ldr	r3, [pc, #292]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x18c>
 8002352:	4b46      	ldr	r3, [pc, #280]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x176>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1ba      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4939      	ldr	r1, [pc, #228]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e03a      	b.n	8002402 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_RCC_OscConfig+0x270>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7ff fc97 	bl	8001ccc <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7ff fc93 	bl	8001ccc <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e19b      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4927      	ldr	r1, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_RCC_OscConfig+0x270>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fc76 	bl	8001ccc <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7ff fc72 	bl	8001ccc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e17a      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d03a      	beq.n	8002484 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d019      	beq.n	800244a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_RCC_OscConfig+0x274>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7ff fc56 	bl	8001ccc <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7ff fc52 	bl	8001ccc <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e15a      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f000 faa8 	bl	8002998 <RCC_Delay>
 8002448:	e01c      	b.n	8002484 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_RCC_OscConfig+0x274>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7ff fc3c 	bl	8001ccc <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002456:	e00f      	b.n	8002478 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff fc38 	bl	8001ccc <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d908      	bls.n	8002478 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e140      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	42420000 	.word	0x42420000
 8002474:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	4b9e      	ldr	r3, [pc, #632]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e9      	bne.n	8002458 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80a6 	beq.w	80025de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002496:	4b97      	ldr	r3, [pc, #604]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10d      	bne.n	80024be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	4b94      	ldr	r3, [pc, #592]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a93      	ldr	r2, [pc, #588]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]
 80024ae:	4b91      	ldr	r3, [pc, #580]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b8e      	ldr	r3, [pc, #568]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a8a      	ldr	r2, [pc, #552]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fbf9 	bl	8001ccc <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7ff fbf5 	bl	8001ccc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0fd      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x312>
 8002504:	4b7b      	ldr	r3, [pc, #492]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a7a      	ldr	r2, [pc, #488]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e02d      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x334>
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a75      	ldr	r2, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6213      	str	r3, [r2, #32]
 8002526:	4b73      	ldr	r3, [pc, #460]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a72      	ldr	r2, [pc, #456]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	e01c      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d10c      	bne.n	8002556 <HAL_RCC_OscConfig+0x356>
 800253c:	4b6d      	ldr	r3, [pc, #436]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a6c      	ldr	r2, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6213      	str	r3, [r2, #32]
 8002548:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a69      	ldr	r2, [pc, #420]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	e00b      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002556:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a66      	ldr	r2, [pc, #408]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a63      	ldr	r2, [pc, #396]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d015      	beq.n	80025a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff fba9 	bl	8001ccc <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff fba5 	bl	8001ccc <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0ab      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002594:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ee      	beq.n	800257e <HAL_RCC_OscConfig+0x37e>
 80025a0:	e014      	b.n	80025cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7ff fb93 	bl	8001ccc <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7ff fb8f 	bl	8001ccc <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e095      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ee      	bne.n	80025aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a47      	ldr	r2, [pc, #284]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8081 	beq.w	80026ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e8:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d061      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d146      	bne.n	800268a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fc:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_RCC_OscConfig+0x4fc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7ff fb63 	bl	8001ccc <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260a:	f7ff fb5f 	bl	8001ccc <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e067      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261c:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d108      	bne.n	8002644 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	492d      	ldr	r1, [pc, #180]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a19      	ldr	r1, [r3, #32]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	430b      	orrs	r3, r1
 8002656:	4927      	ldr	r1, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x4fc>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff fb33 	bl	8001ccc <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266a:	f7ff fb2f 	bl	8001ccc <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e037      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x46a>
 8002688:	e02f      	b.n	80026ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_RCC_OscConfig+0x4fc>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff fb1c 	bl	8001ccc <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff fb18 	bl	8001ccc <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e020      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x498>
 80026b6:	e018      	b.n	80026ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e013      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40007000 	.word	0x40007000
 80026fc:	42420060 	.word	0x42420060

08002700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0d0      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4965      	ldr	r1, [pc, #404]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0b8      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800275c:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002766:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002774:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a52      	ldr	r2, [pc, #328]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800277e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	494d      	ldr	r1, [pc, #308]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d040      	beq.n	8002820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d115      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07f      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e073      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027de:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f023 0203 	bic.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4936      	ldr	r1, [pc, #216]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f0:	f7ff fa6c 	bl	8001ccc <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	e00a      	b.n	800280e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7ff fa68 	bl	8001ccc <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e053      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 020c 	and.w	r2, r3, #12
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	429a      	cmp	r2, r3
 800281e:	d1eb      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d210      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	4922      	ldr	r1, [pc, #136]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e032      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4916      	ldr	r1, [pc, #88]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	490e      	ldr	r1, [pc, #56]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288e:	f000 f821 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002892:	4601      	mov	r1, r0
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	5cd3      	ldrb	r3, [r2, r3]
 80028a2:	fa21 f303 	lsr.w	r3, r1, r3
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1cc>)
 80028a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1d0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f9ca 	bl	8001c48 <HAL_InitTick>

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40022000 	.word	0x40022000
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08004f38 	.word	0x08004f38
 80028cc:	20000010 	.word	0x20000010
 80028d0:	20000014 	.word	0x20000014

080028d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	b490      	push	{r4, r7}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028da:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028dc:	1d3c      	adds	r4, r7, #4
 80028de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028e4:	4b28      	ldr	r3, [pc, #160]	; (8002988 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028fe:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b04      	cmp	r3, #4
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x40>
 800290e:	2b08      	cmp	r3, #8
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x46>
 8002912:	e02d      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002916:	623b      	str	r3, [r7, #32]
      break;
 8002918:	e02d      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	0c9b      	lsrs	r3, r3, #18
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002926:	4413      	add	r3, r2
 8002928:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800292c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <HAL_RCC_GetSysClockFreq+0xb8>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c5b      	lsrs	r3, r3, #17
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002946:	4413      	add	r3, r2
 8002948:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800294c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002952:	fb02 f203 	mul.w	r2, r2, r3
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	e004      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	623b      	str	r3, [r7, #32]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002972:	623b      	str	r3, [r7, #32]
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	6a3b      	ldr	r3, [r7, #32]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3728      	adds	r7, #40	; 0x28
 800297c:	46bd      	mov	sp, r7
 800297e:	bc90      	pop	{r4, r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	080039e4 	.word	0x080039e4
 8002988:	080039f4 	.word	0x080039f4
 800298c:	40021000 	.word	0x40021000
 8002990:	007a1200 	.word	0x007a1200
 8002994:	003d0900 	.word	0x003d0900

08002998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <RCC_Delay+0x34>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <RCC_Delay+0x38>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a5b      	lsrs	r3, r3, #9
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b4:	bf00      	nop
  }
  while (Delay --);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <RCC_Delay+0x1c>
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000010 	.word	0x20000010
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e076      	b.n	8002ad4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d108      	bne.n	8002a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f6:	d009      	beq.n	8002a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
 80029fe:	e005      	b.n	8002a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff f830 	bl	8001a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	ea42 0103 	orr.w	r1, r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	0c1a      	lsrs	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f002 0204 	and.w	r2, r2, #4
 8002ab2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_SPI_Transmit+0x22>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e126      	b.n	8002d4c <HAL_SPI_Transmit+0x270>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b06:	f7ff f8e1 	bl	8001ccc <HAL_GetTick>
 8002b0a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d002      	beq.n	8002b22 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b20:	e10b      	b.n	8002d3a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_SPI_Transmit+0x52>
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d102      	bne.n	8002b34 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b32:	e102      	b.n	8002d3a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2203      	movs	r2, #3
 8002b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	88fa      	ldrh	r2, [r7, #6]
 8002b4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	88fa      	ldrh	r2, [r7, #6]
 8002b52:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7a:	d10f      	bne.n	8002b9c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b40      	cmp	r3, #64	; 0x40
 8002ba8:	d007      	beq.n	8002bba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc2:	d14b      	bne.n	8002c5c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_SPI_Transmit+0xf6>
 8002bcc:	8afb      	ldrh	r3, [r7, #22]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d13e      	bne.n	8002c50 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	881a      	ldrh	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	1c9a      	adds	r2, r3, #2
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bf6:	e02b      	b.n	8002c50 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d112      	bne.n	8002c2c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	881a      	ldrh	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	1c9a      	adds	r2, r3, #2
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c2a:	e011      	b.n	8002c50 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c2c:	f7ff f84e 	bl	8001ccc <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d803      	bhi.n	8002c44 <HAL_SPI_Transmit+0x168>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c42:	d102      	bne.n	8002c4a <HAL_SPI_Transmit+0x16e>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d102      	bne.n	8002c50 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c4e:	e074      	b.n	8002d3a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ce      	bne.n	8002bf8 <HAL_SPI_Transmit+0x11c>
 8002c5a:	e04c      	b.n	8002cf6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_SPI_Transmit+0x18e>
 8002c64:	8afb      	ldrh	r3, [r7, #22]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d140      	bne.n	8002cec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c90:	e02c      	b.n	8002cec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d113      	bne.n	8002cc8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cc6:	e011      	b.n	8002cec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc8:	f7ff f800 	bl	8001ccc <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d803      	bhi.n	8002ce0 <HAL_SPI_Transmit+0x204>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d102      	bne.n	8002ce6 <HAL_SPI_Transmit+0x20a>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cea:	e026      	b.n	8002d3a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1cd      	bne.n	8002c92 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f8b2 	bl	8002e64 <SPI_EndRxTxTransaction>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	77fb      	strb	r3, [r7, #31]
 8002d36:	e000      	b.n	8002d3a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d64:	f7fe ffb2 	bl	8001ccc <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d74:	f7fe ffaa 	bl	8001ccc <HAL_GetTick>
 8002d78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d7a:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	015b      	lsls	r3, r3, #5
 8002d80:	0d1b      	lsrs	r3, r3, #20
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d8a:	e054      	b.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d050      	beq.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d94:	f7fe ff9a 	bl	8001ccc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d902      	bls.n	8002daa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d13d      	bne.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dc2:	d111      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dcc:	d004      	beq.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd6:	d107      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df0:	d10f      	bne.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e017      	b.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d19b      	bne.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000010 	.word	0x20000010

08002e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff ff6a 	bl	8002d54 <SPI_WaitFlagStateUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f043 0220 	orr.w	r2, r3, #32
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e000      	b.n	8002e98 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <__errno>:
 8002ea0:	4b01      	ldr	r3, [pc, #4]	; (8002ea8 <__errno+0x8>)
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	2000001c 	.word	0x2000001c

08002eac <__libc_init_array>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	2500      	movs	r5, #0
 8002eb0:	4e0c      	ldr	r6, [pc, #48]	; (8002ee4 <__libc_init_array+0x38>)
 8002eb2:	4c0d      	ldr	r4, [pc, #52]	; (8002ee8 <__libc_init_array+0x3c>)
 8002eb4:	1ba4      	subs	r4, r4, r6
 8002eb6:	10a4      	asrs	r4, r4, #2
 8002eb8:	42a5      	cmp	r5, r4
 8002eba:	d109      	bne.n	8002ed0 <__libc_init_array+0x24>
 8002ebc:	f000 fca4 	bl	8003808 <_init>
 8002ec0:	2500      	movs	r5, #0
 8002ec2:	4e0a      	ldr	r6, [pc, #40]	; (8002eec <__libc_init_array+0x40>)
 8002ec4:	4c0a      	ldr	r4, [pc, #40]	; (8002ef0 <__libc_init_array+0x44>)
 8002ec6:	1ba4      	subs	r4, r4, r6
 8002ec8:	10a4      	asrs	r4, r4, #2
 8002eca:	42a5      	cmp	r5, r4
 8002ecc:	d105      	bne.n	8002eda <__libc_init_array+0x2e>
 8002ece:	bd70      	pop	{r4, r5, r6, pc}
 8002ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed4:	4798      	blx	r3
 8002ed6:	3501      	adds	r5, #1
 8002ed8:	e7ee      	b.n	8002eb8 <__libc_init_array+0xc>
 8002eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ede:	4798      	blx	r3
 8002ee0:	3501      	adds	r5, #1
 8002ee2:	e7f2      	b.n	8002eca <__libc_init_array+0x1e>
 8002ee4:	08004f7c 	.word	0x08004f7c
 8002ee8:	08004f7c 	.word	0x08004f7c
 8002eec:	08004f7c 	.word	0x08004f7c
 8002ef0:	08004f80 	.word	0x08004f80

08002ef4 <malloc>:
 8002ef4:	4b02      	ldr	r3, [pc, #8]	; (8002f00 <malloc+0xc>)
 8002ef6:	4601      	mov	r1, r0
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	f000 b857 	b.w	8002fac <_malloc_r>
 8002efe:	bf00      	nop
 8002f00:	2000001c 	.word	0x2000001c

08002f04 <memset>:
 8002f04:	4603      	mov	r3, r0
 8002f06:	4402      	add	r2, r0
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d100      	bne.n	8002f0e <memset+0xa>
 8002f0c:	4770      	bx	lr
 8002f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f12:	e7f9      	b.n	8002f08 <memset+0x4>

08002f14 <_free_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	4605      	mov	r5, r0
 8002f18:	2900      	cmp	r1, #0
 8002f1a:	d043      	beq.n	8002fa4 <_free_r+0x90>
 8002f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f20:	1f0c      	subs	r4, r1, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bfb8      	it	lt
 8002f26:	18e4      	addlt	r4, r4, r3
 8002f28:	f000 f932 	bl	8003190 <__malloc_lock>
 8002f2c:	4a1e      	ldr	r2, [pc, #120]	; (8002fa8 <_free_r+0x94>)
 8002f2e:	6813      	ldr	r3, [r2, #0]
 8002f30:	4610      	mov	r0, r2
 8002f32:	b933      	cbnz	r3, 8002f42 <_free_r+0x2e>
 8002f34:	6063      	str	r3, [r4, #4]
 8002f36:	6014      	str	r4, [r2, #0]
 8002f38:	4628      	mov	r0, r5
 8002f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f3e:	f000 b928 	b.w	8003192 <__malloc_unlock>
 8002f42:	42a3      	cmp	r3, r4
 8002f44:	d90b      	bls.n	8002f5e <_free_r+0x4a>
 8002f46:	6821      	ldr	r1, [r4, #0]
 8002f48:	1862      	adds	r2, r4, r1
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	bf01      	itttt	eq
 8002f4e:	681a      	ldreq	r2, [r3, #0]
 8002f50:	685b      	ldreq	r3, [r3, #4]
 8002f52:	1852      	addeq	r2, r2, r1
 8002f54:	6022      	streq	r2, [r4, #0]
 8002f56:	6063      	str	r3, [r4, #4]
 8002f58:	6004      	str	r4, [r0, #0]
 8002f5a:	e7ed      	b.n	8002f38 <_free_r+0x24>
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	b10a      	cbz	r2, 8002f66 <_free_r+0x52>
 8002f62:	42a2      	cmp	r2, r4
 8002f64:	d9fa      	bls.n	8002f5c <_free_r+0x48>
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	1858      	adds	r0, r3, r1
 8002f6a:	42a0      	cmp	r0, r4
 8002f6c:	d10b      	bne.n	8002f86 <_free_r+0x72>
 8002f6e:	6820      	ldr	r0, [r4, #0]
 8002f70:	4401      	add	r1, r0
 8002f72:	1858      	adds	r0, r3, r1
 8002f74:	4282      	cmp	r2, r0
 8002f76:	6019      	str	r1, [r3, #0]
 8002f78:	d1de      	bne.n	8002f38 <_free_r+0x24>
 8002f7a:	6810      	ldr	r0, [r2, #0]
 8002f7c:	6852      	ldr	r2, [r2, #4]
 8002f7e:	4401      	add	r1, r0
 8002f80:	6019      	str	r1, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	e7d8      	b.n	8002f38 <_free_r+0x24>
 8002f86:	d902      	bls.n	8002f8e <_free_r+0x7a>
 8002f88:	230c      	movs	r3, #12
 8002f8a:	602b      	str	r3, [r5, #0]
 8002f8c:	e7d4      	b.n	8002f38 <_free_r+0x24>
 8002f8e:	6820      	ldr	r0, [r4, #0]
 8002f90:	1821      	adds	r1, r4, r0
 8002f92:	428a      	cmp	r2, r1
 8002f94:	bf01      	itttt	eq
 8002f96:	6811      	ldreq	r1, [r2, #0]
 8002f98:	6852      	ldreq	r2, [r2, #4]
 8002f9a:	1809      	addeq	r1, r1, r0
 8002f9c:	6021      	streq	r1, [r4, #0]
 8002f9e:	6062      	str	r2, [r4, #4]
 8002fa0:	605c      	str	r4, [r3, #4]
 8002fa2:	e7c9      	b.n	8002f38 <_free_r+0x24>
 8002fa4:	bd38      	pop	{r3, r4, r5, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000128 	.word	0x20000128

08002fac <_malloc_r>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	1ccd      	adds	r5, r1, #3
 8002fb0:	f025 0503 	bic.w	r5, r5, #3
 8002fb4:	3508      	adds	r5, #8
 8002fb6:	2d0c      	cmp	r5, #12
 8002fb8:	bf38      	it	cc
 8002fba:	250c      	movcc	r5, #12
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	4606      	mov	r6, r0
 8002fc0:	db01      	blt.n	8002fc6 <_malloc_r+0x1a>
 8002fc2:	42a9      	cmp	r1, r5
 8002fc4:	d903      	bls.n	8002fce <_malloc_r+0x22>
 8002fc6:	230c      	movs	r3, #12
 8002fc8:	6033      	str	r3, [r6, #0]
 8002fca:	2000      	movs	r0, #0
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
 8002fce:	f000 f8df 	bl	8003190 <__malloc_lock>
 8002fd2:	4a21      	ldr	r2, [pc, #132]	; (8003058 <_malloc_r+0xac>)
 8002fd4:	6814      	ldr	r4, [r2, #0]
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	b991      	cbnz	r1, 8003000 <_malloc_r+0x54>
 8002fda:	4c20      	ldr	r4, [pc, #128]	; (800305c <_malloc_r+0xb0>)
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	b91b      	cbnz	r3, 8002fe8 <_malloc_r+0x3c>
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	f000 f871 	bl	80030c8 <_sbrk_r>
 8002fe6:	6020      	str	r0, [r4, #0]
 8002fe8:	4629      	mov	r1, r5
 8002fea:	4630      	mov	r0, r6
 8002fec:	f000 f86c 	bl	80030c8 <_sbrk_r>
 8002ff0:	1c43      	adds	r3, r0, #1
 8002ff2:	d124      	bne.n	800303e <_malloc_r+0x92>
 8002ff4:	230c      	movs	r3, #12
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	6033      	str	r3, [r6, #0]
 8002ffa:	f000 f8ca 	bl	8003192 <__malloc_unlock>
 8002ffe:	e7e4      	b.n	8002fca <_malloc_r+0x1e>
 8003000:	680b      	ldr	r3, [r1, #0]
 8003002:	1b5b      	subs	r3, r3, r5
 8003004:	d418      	bmi.n	8003038 <_malloc_r+0x8c>
 8003006:	2b0b      	cmp	r3, #11
 8003008:	d90f      	bls.n	800302a <_malloc_r+0x7e>
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	18cc      	adds	r4, r1, r3
 800300e:	50cd      	str	r5, [r1, r3]
 8003010:	4630      	mov	r0, r6
 8003012:	f000 f8be 	bl	8003192 <__malloc_unlock>
 8003016:	f104 000b 	add.w	r0, r4, #11
 800301a:	1d23      	adds	r3, r4, #4
 800301c:	f020 0007 	bic.w	r0, r0, #7
 8003020:	1ac3      	subs	r3, r0, r3
 8003022:	d0d3      	beq.n	8002fcc <_malloc_r+0x20>
 8003024:	425a      	negs	r2, r3
 8003026:	50e2      	str	r2, [r4, r3]
 8003028:	e7d0      	b.n	8002fcc <_malloc_r+0x20>
 800302a:	684b      	ldr	r3, [r1, #4]
 800302c:	428c      	cmp	r4, r1
 800302e:	bf16      	itet	ne
 8003030:	6063      	strne	r3, [r4, #4]
 8003032:	6013      	streq	r3, [r2, #0]
 8003034:	460c      	movne	r4, r1
 8003036:	e7eb      	b.n	8003010 <_malloc_r+0x64>
 8003038:	460c      	mov	r4, r1
 800303a:	6849      	ldr	r1, [r1, #4]
 800303c:	e7cc      	b.n	8002fd8 <_malloc_r+0x2c>
 800303e:	1cc4      	adds	r4, r0, #3
 8003040:	f024 0403 	bic.w	r4, r4, #3
 8003044:	42a0      	cmp	r0, r4
 8003046:	d005      	beq.n	8003054 <_malloc_r+0xa8>
 8003048:	1a21      	subs	r1, r4, r0
 800304a:	4630      	mov	r0, r6
 800304c:	f000 f83c 	bl	80030c8 <_sbrk_r>
 8003050:	3001      	adds	r0, #1
 8003052:	d0cf      	beq.n	8002ff4 <_malloc_r+0x48>
 8003054:	6025      	str	r5, [r4, #0]
 8003056:	e7db      	b.n	8003010 <_malloc_r+0x64>
 8003058:	20000128 	.word	0x20000128
 800305c:	2000012c 	.word	0x2000012c

08003060 <rand>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <rand+0x50>)
 8003064:	681c      	ldr	r4, [r3, #0]
 8003066:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003068:	b97b      	cbnz	r3, 800308a <rand+0x2a>
 800306a:	2018      	movs	r0, #24
 800306c:	f7ff ff42 	bl	8002ef4 <malloc>
 8003070:	4a10      	ldr	r2, [pc, #64]	; (80030b4 <rand+0x54>)
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <rand+0x58>)
 8003074:	63a0      	str	r0, [r4, #56]	; 0x38
 8003076:	e9c0 2300 	strd	r2, r3, [r0]
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <rand+0x5c>)
 800307c:	2201      	movs	r2, #1
 800307e:	6083      	str	r3, [r0, #8]
 8003080:	230b      	movs	r3, #11
 8003082:	8183      	strh	r3, [r0, #12]
 8003084:	2300      	movs	r3, #0
 8003086:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800308a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800308c:	480c      	ldr	r0, [pc, #48]	; (80030c0 <rand+0x60>)
 800308e:	690a      	ldr	r2, [r1, #16]
 8003090:	694b      	ldr	r3, [r1, #20]
 8003092:	4350      	muls	r0, r2
 8003094:	4c0b      	ldr	r4, [pc, #44]	; (80030c4 <rand+0x64>)
 8003096:	fb04 0003 	mla	r0, r4, r3, r0
 800309a:	fba2 2304 	umull	r2, r3, r2, r4
 800309e:	4403      	add	r3, r0
 80030a0:	1c54      	adds	r4, r2, #1
 80030a2:	f143 0500 	adc.w	r5, r3, #0
 80030a6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80030aa:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	2000001c 	.word	0x2000001c
 80030b4:	abcd330e 	.word	0xabcd330e
 80030b8:	e66d1234 	.word	0xe66d1234
 80030bc:	0005deec 	.word	0x0005deec
 80030c0:	5851f42d 	.word	0x5851f42d
 80030c4:	4c957f2d 	.word	0x4c957f2d

080030c8 <_sbrk_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	2300      	movs	r3, #0
 80030cc:	4c05      	ldr	r4, [pc, #20]	; (80030e4 <_sbrk_r+0x1c>)
 80030ce:	4605      	mov	r5, r0
 80030d0:	4608      	mov	r0, r1
 80030d2:	6023      	str	r3, [r4, #0]
 80030d4:	f7fe fd40 	bl	8001b58 <_sbrk>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d102      	bne.n	80030e2 <_sbrk_r+0x1a>
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	b103      	cbz	r3, 80030e2 <_sbrk_r+0x1a>
 80030e0:	602b      	str	r3, [r5, #0]
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	2000018c 	.word	0x2000018c

080030e8 <sniprintf>:
 80030e8:	b40c      	push	{r2, r3}
 80030ea:	b530      	push	{r4, r5, lr}
 80030ec:	4b17      	ldr	r3, [pc, #92]	; (800314c <sniprintf+0x64>)
 80030ee:	1e0c      	subs	r4, r1, #0
 80030f0:	b09d      	sub	sp, #116	; 0x74
 80030f2:	681d      	ldr	r5, [r3, #0]
 80030f4:	da08      	bge.n	8003108 <sniprintf+0x20>
 80030f6:	238b      	movs	r3, #139	; 0x8b
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	b01d      	add	sp, #116	; 0x74
 8003100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003104:	b002      	add	sp, #8
 8003106:	4770      	bx	lr
 8003108:	f44f 7302 	mov.w	r3, #520	; 0x208
 800310c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003110:	bf0c      	ite	eq
 8003112:	4623      	moveq	r3, r4
 8003114:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003118:	9304      	str	r3, [sp, #16]
 800311a:	9307      	str	r3, [sp, #28]
 800311c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003120:	9002      	str	r0, [sp, #8]
 8003122:	9006      	str	r0, [sp, #24]
 8003124:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003128:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800312a:	ab21      	add	r3, sp, #132	; 0x84
 800312c:	a902      	add	r1, sp, #8
 800312e:	4628      	mov	r0, r5
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	f000 f889 	bl	8003248 <_svfiprintf_r>
 8003136:	1c43      	adds	r3, r0, #1
 8003138:	bfbc      	itt	lt
 800313a:	238b      	movlt	r3, #139	; 0x8b
 800313c:	602b      	strlt	r3, [r5, #0]
 800313e:	2c00      	cmp	r4, #0
 8003140:	d0dd      	beq.n	80030fe <sniprintf+0x16>
 8003142:	2200      	movs	r2, #0
 8003144:	9b02      	ldr	r3, [sp, #8]
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e7d9      	b.n	80030fe <sniprintf+0x16>
 800314a:	bf00      	nop
 800314c:	2000001c 	.word	0x2000001c

08003150 <siprintf>:
 8003150:	b40e      	push	{r1, r2, r3}
 8003152:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003156:	b500      	push	{lr}
 8003158:	b09c      	sub	sp, #112	; 0x70
 800315a:	ab1d      	add	r3, sp, #116	; 0x74
 800315c:	9002      	str	r0, [sp, #8]
 800315e:	9006      	str	r0, [sp, #24]
 8003160:	9107      	str	r1, [sp, #28]
 8003162:	9104      	str	r1, [sp, #16]
 8003164:	4808      	ldr	r0, [pc, #32]	; (8003188 <siprintf+0x38>)
 8003166:	4909      	ldr	r1, [pc, #36]	; (800318c <siprintf+0x3c>)
 8003168:	f853 2b04 	ldr.w	r2, [r3], #4
 800316c:	9105      	str	r1, [sp, #20]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	a902      	add	r1, sp, #8
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	f000 f868 	bl	8003248 <_svfiprintf_r>
 8003178:	2200      	movs	r2, #0
 800317a:	9b02      	ldr	r3, [sp, #8]
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	b01c      	add	sp, #112	; 0x70
 8003180:	f85d eb04 	ldr.w	lr, [sp], #4
 8003184:	b003      	add	sp, #12
 8003186:	4770      	bx	lr
 8003188:	2000001c 	.word	0x2000001c
 800318c:	ffff0208 	.word	0xffff0208

08003190 <__malloc_lock>:
 8003190:	4770      	bx	lr

08003192 <__malloc_unlock>:
 8003192:	4770      	bx	lr

08003194 <__ssputs_r>:
 8003194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003198:	688e      	ldr	r6, [r1, #8]
 800319a:	4682      	mov	sl, r0
 800319c:	429e      	cmp	r6, r3
 800319e:	460c      	mov	r4, r1
 80031a0:	4690      	mov	r8, r2
 80031a2:	4699      	mov	r9, r3
 80031a4:	d837      	bhi.n	8003216 <__ssputs_r+0x82>
 80031a6:	898a      	ldrh	r2, [r1, #12]
 80031a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031ac:	d031      	beq.n	8003212 <__ssputs_r+0x7e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	6825      	ldr	r5, [r4, #0]
 80031b2:	6909      	ldr	r1, [r1, #16]
 80031b4:	1a6f      	subs	r7, r5, r1
 80031b6:	6965      	ldr	r5, [r4, #20]
 80031b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80031c0:	f109 0301 	add.w	r3, r9, #1
 80031c4:	443b      	add	r3, r7
 80031c6:	429d      	cmp	r5, r3
 80031c8:	bf38      	it	cc
 80031ca:	461d      	movcc	r5, r3
 80031cc:	0553      	lsls	r3, r2, #21
 80031ce:	d530      	bpl.n	8003232 <__ssputs_r+0x9e>
 80031d0:	4629      	mov	r1, r5
 80031d2:	f7ff feeb 	bl	8002fac <_malloc_r>
 80031d6:	4606      	mov	r6, r0
 80031d8:	b950      	cbnz	r0, 80031f0 <__ssputs_r+0x5c>
 80031da:	230c      	movs	r3, #12
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295
 80031e0:	f8ca 3000 	str.w	r3, [sl]
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ea:	81a3      	strh	r3, [r4, #12]
 80031ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f0:	463a      	mov	r2, r7
 80031f2:	6921      	ldr	r1, [r4, #16]
 80031f4:	f000 fab6 	bl	8003764 <memcpy>
 80031f8:	89a3      	ldrh	r3, [r4, #12]
 80031fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003202:	81a3      	strh	r3, [r4, #12]
 8003204:	6126      	str	r6, [r4, #16]
 8003206:	443e      	add	r6, r7
 8003208:	6026      	str	r6, [r4, #0]
 800320a:	464e      	mov	r6, r9
 800320c:	6165      	str	r5, [r4, #20]
 800320e:	1bed      	subs	r5, r5, r7
 8003210:	60a5      	str	r5, [r4, #8]
 8003212:	454e      	cmp	r6, r9
 8003214:	d900      	bls.n	8003218 <__ssputs_r+0x84>
 8003216:	464e      	mov	r6, r9
 8003218:	4632      	mov	r2, r6
 800321a:	4641      	mov	r1, r8
 800321c:	6820      	ldr	r0, [r4, #0]
 800321e:	f000 faac 	bl	800377a <memmove>
 8003222:	68a3      	ldr	r3, [r4, #8]
 8003224:	2000      	movs	r0, #0
 8003226:	1b9b      	subs	r3, r3, r6
 8003228:	60a3      	str	r3, [r4, #8]
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	441e      	add	r6, r3
 800322e:	6026      	str	r6, [r4, #0]
 8003230:	e7dc      	b.n	80031ec <__ssputs_r+0x58>
 8003232:	462a      	mov	r2, r5
 8003234:	f000 faba 	bl	80037ac <_realloc_r>
 8003238:	4606      	mov	r6, r0
 800323a:	2800      	cmp	r0, #0
 800323c:	d1e2      	bne.n	8003204 <__ssputs_r+0x70>
 800323e:	6921      	ldr	r1, [r4, #16]
 8003240:	4650      	mov	r0, sl
 8003242:	f7ff fe67 	bl	8002f14 <_free_r>
 8003246:	e7c8      	b.n	80031da <__ssputs_r+0x46>

08003248 <_svfiprintf_r>:
 8003248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324c:	461d      	mov	r5, r3
 800324e:	898b      	ldrh	r3, [r1, #12]
 8003250:	b09d      	sub	sp, #116	; 0x74
 8003252:	061f      	lsls	r7, r3, #24
 8003254:	4680      	mov	r8, r0
 8003256:	460c      	mov	r4, r1
 8003258:	4616      	mov	r6, r2
 800325a:	d50f      	bpl.n	800327c <_svfiprintf_r+0x34>
 800325c:	690b      	ldr	r3, [r1, #16]
 800325e:	b96b      	cbnz	r3, 800327c <_svfiprintf_r+0x34>
 8003260:	2140      	movs	r1, #64	; 0x40
 8003262:	f7ff fea3 	bl	8002fac <_malloc_r>
 8003266:	6020      	str	r0, [r4, #0]
 8003268:	6120      	str	r0, [r4, #16]
 800326a:	b928      	cbnz	r0, 8003278 <_svfiprintf_r+0x30>
 800326c:	230c      	movs	r3, #12
 800326e:	f8c8 3000 	str.w	r3, [r8]
 8003272:	f04f 30ff 	mov.w	r0, #4294967295
 8003276:	e0c8      	b.n	800340a <_svfiprintf_r+0x1c2>
 8003278:	2340      	movs	r3, #64	; 0x40
 800327a:	6163      	str	r3, [r4, #20]
 800327c:	2300      	movs	r3, #0
 800327e:	9309      	str	r3, [sp, #36]	; 0x24
 8003280:	2320      	movs	r3, #32
 8003282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003286:	2330      	movs	r3, #48	; 0x30
 8003288:	f04f 0b01 	mov.w	fp, #1
 800328c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003290:	9503      	str	r5, [sp, #12]
 8003292:	4637      	mov	r7, r6
 8003294:	463d      	mov	r5, r7
 8003296:	f815 3b01 	ldrb.w	r3, [r5], #1
 800329a:	b10b      	cbz	r3, 80032a0 <_svfiprintf_r+0x58>
 800329c:	2b25      	cmp	r3, #37	; 0x25
 800329e:	d13e      	bne.n	800331e <_svfiprintf_r+0xd6>
 80032a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80032a4:	d00b      	beq.n	80032be <_svfiprintf_r+0x76>
 80032a6:	4653      	mov	r3, sl
 80032a8:	4632      	mov	r2, r6
 80032aa:	4621      	mov	r1, r4
 80032ac:	4640      	mov	r0, r8
 80032ae:	f7ff ff71 	bl	8003194 <__ssputs_r>
 80032b2:	3001      	adds	r0, #1
 80032b4:	f000 80a4 	beq.w	8003400 <_svfiprintf_r+0x1b8>
 80032b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ba:	4453      	add	r3, sl
 80032bc:	9309      	str	r3, [sp, #36]	; 0x24
 80032be:	783b      	ldrb	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 809d 	beq.w	8003400 <_svfiprintf_r+0x1b8>
 80032c6:	2300      	movs	r3, #0
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032d0:	9304      	str	r3, [sp, #16]
 80032d2:	9307      	str	r3, [sp, #28]
 80032d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032d8:	931a      	str	r3, [sp, #104]	; 0x68
 80032da:	462f      	mov	r7, r5
 80032dc:	2205      	movs	r2, #5
 80032de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80032e2:	4850      	ldr	r0, [pc, #320]	; (8003424 <_svfiprintf_r+0x1dc>)
 80032e4:	f000 fa30 	bl	8003748 <memchr>
 80032e8:	9b04      	ldr	r3, [sp, #16]
 80032ea:	b9d0      	cbnz	r0, 8003322 <_svfiprintf_r+0xda>
 80032ec:	06d9      	lsls	r1, r3, #27
 80032ee:	bf44      	itt	mi
 80032f0:	2220      	movmi	r2, #32
 80032f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032f6:	071a      	lsls	r2, r3, #28
 80032f8:	bf44      	itt	mi
 80032fa:	222b      	movmi	r2, #43	; 0x2b
 80032fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003300:	782a      	ldrb	r2, [r5, #0]
 8003302:	2a2a      	cmp	r2, #42	; 0x2a
 8003304:	d015      	beq.n	8003332 <_svfiprintf_r+0xea>
 8003306:	462f      	mov	r7, r5
 8003308:	2000      	movs	r0, #0
 800330a:	250a      	movs	r5, #10
 800330c:	9a07      	ldr	r2, [sp, #28]
 800330e:	4639      	mov	r1, r7
 8003310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003314:	3b30      	subs	r3, #48	; 0x30
 8003316:	2b09      	cmp	r3, #9
 8003318:	d94d      	bls.n	80033b6 <_svfiprintf_r+0x16e>
 800331a:	b1b8      	cbz	r0, 800334c <_svfiprintf_r+0x104>
 800331c:	e00f      	b.n	800333e <_svfiprintf_r+0xf6>
 800331e:	462f      	mov	r7, r5
 8003320:	e7b8      	b.n	8003294 <_svfiprintf_r+0x4c>
 8003322:	4a40      	ldr	r2, [pc, #256]	; (8003424 <_svfiprintf_r+0x1dc>)
 8003324:	463d      	mov	r5, r7
 8003326:	1a80      	subs	r0, r0, r2
 8003328:	fa0b f000 	lsl.w	r0, fp, r0
 800332c:	4318      	orrs	r0, r3
 800332e:	9004      	str	r0, [sp, #16]
 8003330:	e7d3      	b.n	80032da <_svfiprintf_r+0x92>
 8003332:	9a03      	ldr	r2, [sp, #12]
 8003334:	1d11      	adds	r1, r2, #4
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	9103      	str	r1, [sp, #12]
 800333a:	2a00      	cmp	r2, #0
 800333c:	db01      	blt.n	8003342 <_svfiprintf_r+0xfa>
 800333e:	9207      	str	r2, [sp, #28]
 8003340:	e004      	b.n	800334c <_svfiprintf_r+0x104>
 8003342:	4252      	negs	r2, r2
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	9207      	str	r2, [sp, #28]
 800334a:	9304      	str	r3, [sp, #16]
 800334c:	783b      	ldrb	r3, [r7, #0]
 800334e:	2b2e      	cmp	r3, #46	; 0x2e
 8003350:	d10c      	bne.n	800336c <_svfiprintf_r+0x124>
 8003352:	787b      	ldrb	r3, [r7, #1]
 8003354:	2b2a      	cmp	r3, #42	; 0x2a
 8003356:	d133      	bne.n	80033c0 <_svfiprintf_r+0x178>
 8003358:	9b03      	ldr	r3, [sp, #12]
 800335a:	3702      	adds	r7, #2
 800335c:	1d1a      	adds	r2, r3, #4
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	9203      	str	r2, [sp, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	bfb8      	it	lt
 8003366:	f04f 33ff 	movlt.w	r3, #4294967295
 800336a:	9305      	str	r3, [sp, #20]
 800336c:	4d2e      	ldr	r5, [pc, #184]	; (8003428 <_svfiprintf_r+0x1e0>)
 800336e:	2203      	movs	r2, #3
 8003370:	7839      	ldrb	r1, [r7, #0]
 8003372:	4628      	mov	r0, r5
 8003374:	f000 f9e8 	bl	8003748 <memchr>
 8003378:	b138      	cbz	r0, 800338a <_svfiprintf_r+0x142>
 800337a:	2340      	movs	r3, #64	; 0x40
 800337c:	1b40      	subs	r0, r0, r5
 800337e:	fa03 f000 	lsl.w	r0, r3, r0
 8003382:	9b04      	ldr	r3, [sp, #16]
 8003384:	3701      	adds	r7, #1
 8003386:	4303      	orrs	r3, r0
 8003388:	9304      	str	r3, [sp, #16]
 800338a:	7839      	ldrb	r1, [r7, #0]
 800338c:	2206      	movs	r2, #6
 800338e:	4827      	ldr	r0, [pc, #156]	; (800342c <_svfiprintf_r+0x1e4>)
 8003390:	1c7e      	adds	r6, r7, #1
 8003392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003396:	f000 f9d7 	bl	8003748 <memchr>
 800339a:	2800      	cmp	r0, #0
 800339c:	d038      	beq.n	8003410 <_svfiprintf_r+0x1c8>
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <_svfiprintf_r+0x1e8>)
 80033a0:	bb13      	cbnz	r3, 80033e8 <_svfiprintf_r+0x1a0>
 80033a2:	9b03      	ldr	r3, [sp, #12]
 80033a4:	3307      	adds	r3, #7
 80033a6:	f023 0307 	bic.w	r3, r3, #7
 80033aa:	3308      	adds	r3, #8
 80033ac:	9303      	str	r3, [sp, #12]
 80033ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033b0:	444b      	add	r3, r9
 80033b2:	9309      	str	r3, [sp, #36]	; 0x24
 80033b4:	e76d      	b.n	8003292 <_svfiprintf_r+0x4a>
 80033b6:	fb05 3202 	mla	r2, r5, r2, r3
 80033ba:	2001      	movs	r0, #1
 80033bc:	460f      	mov	r7, r1
 80033be:	e7a6      	b.n	800330e <_svfiprintf_r+0xc6>
 80033c0:	2300      	movs	r3, #0
 80033c2:	250a      	movs	r5, #10
 80033c4:	4619      	mov	r1, r3
 80033c6:	3701      	adds	r7, #1
 80033c8:	9305      	str	r3, [sp, #20]
 80033ca:	4638      	mov	r0, r7
 80033cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033d0:	3a30      	subs	r2, #48	; 0x30
 80033d2:	2a09      	cmp	r2, #9
 80033d4:	d903      	bls.n	80033de <_svfiprintf_r+0x196>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0c8      	beq.n	800336c <_svfiprintf_r+0x124>
 80033da:	9105      	str	r1, [sp, #20]
 80033dc:	e7c6      	b.n	800336c <_svfiprintf_r+0x124>
 80033de:	fb05 2101 	mla	r1, r5, r1, r2
 80033e2:	2301      	movs	r3, #1
 80033e4:	4607      	mov	r7, r0
 80033e6:	e7f0      	b.n	80033ca <_svfiprintf_r+0x182>
 80033e8:	ab03      	add	r3, sp, #12
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	4622      	mov	r2, r4
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <_svfiprintf_r+0x1ec>)
 80033f0:	a904      	add	r1, sp, #16
 80033f2:	4640      	mov	r0, r8
 80033f4:	f3af 8000 	nop.w
 80033f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033fc:	4681      	mov	r9, r0
 80033fe:	d1d6      	bne.n	80033ae <_svfiprintf_r+0x166>
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	065b      	lsls	r3, r3, #25
 8003404:	f53f af35 	bmi.w	8003272 <_svfiprintf_r+0x2a>
 8003408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800340a:	b01d      	add	sp, #116	; 0x74
 800340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003410:	ab03      	add	r3, sp, #12
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	4622      	mov	r2, r4
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <_svfiprintf_r+0x1ec>)
 8003418:	a904      	add	r1, sp, #16
 800341a:	4640      	mov	r0, r8
 800341c:	f000 f882 	bl	8003524 <_printf_i>
 8003420:	e7ea      	b.n	80033f8 <_svfiprintf_r+0x1b0>
 8003422:	bf00      	nop
 8003424:	08004f48 	.word	0x08004f48
 8003428:	08004f4e 	.word	0x08004f4e
 800342c:	08004f52 	.word	0x08004f52
 8003430:	00000000 	.word	0x00000000
 8003434:	08003195 	.word	0x08003195

08003438 <_printf_common>:
 8003438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800343c:	4691      	mov	r9, r2
 800343e:	461f      	mov	r7, r3
 8003440:	688a      	ldr	r2, [r1, #8]
 8003442:	690b      	ldr	r3, [r1, #16]
 8003444:	4606      	mov	r6, r0
 8003446:	4293      	cmp	r3, r2
 8003448:	bfb8      	it	lt
 800344a:	4613      	movlt	r3, r2
 800344c:	f8c9 3000 	str.w	r3, [r9]
 8003450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003454:	460c      	mov	r4, r1
 8003456:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800345a:	b112      	cbz	r2, 8003462 <_printf_common+0x2a>
 800345c:	3301      	adds	r3, #1
 800345e:	f8c9 3000 	str.w	r3, [r9]
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	0699      	lsls	r1, r3, #26
 8003466:	bf42      	ittt	mi
 8003468:	f8d9 3000 	ldrmi.w	r3, [r9]
 800346c:	3302      	addmi	r3, #2
 800346e:	f8c9 3000 	strmi.w	r3, [r9]
 8003472:	6825      	ldr	r5, [r4, #0]
 8003474:	f015 0506 	ands.w	r5, r5, #6
 8003478:	d107      	bne.n	800348a <_printf_common+0x52>
 800347a:	f104 0a19 	add.w	sl, r4, #25
 800347e:	68e3      	ldr	r3, [r4, #12]
 8003480:	f8d9 2000 	ldr.w	r2, [r9]
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	42ab      	cmp	r3, r5
 8003488:	dc29      	bgt.n	80034de <_printf_common+0xa6>
 800348a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800348e:	6822      	ldr	r2, [r4, #0]
 8003490:	3300      	adds	r3, #0
 8003492:	bf18      	it	ne
 8003494:	2301      	movne	r3, #1
 8003496:	0692      	lsls	r2, r2, #26
 8003498:	d42e      	bmi.n	80034f8 <_printf_common+0xc0>
 800349a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800349e:	4639      	mov	r1, r7
 80034a0:	4630      	mov	r0, r6
 80034a2:	47c0      	blx	r8
 80034a4:	3001      	adds	r0, #1
 80034a6:	d021      	beq.n	80034ec <_printf_common+0xb4>
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	68e5      	ldr	r5, [r4, #12]
 80034ac:	f003 0306 	and.w	r3, r3, #6
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	bf18      	it	ne
 80034b4:	2500      	movne	r5, #0
 80034b6:	f8d9 2000 	ldr.w	r2, [r9]
 80034ba:	f04f 0900 	mov.w	r9, #0
 80034be:	bf08      	it	eq
 80034c0:	1aad      	subeq	r5, r5, r2
 80034c2:	68a3      	ldr	r3, [r4, #8]
 80034c4:	6922      	ldr	r2, [r4, #16]
 80034c6:	bf08      	it	eq
 80034c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034cc:	4293      	cmp	r3, r2
 80034ce:	bfc4      	itt	gt
 80034d0:	1a9b      	subgt	r3, r3, r2
 80034d2:	18ed      	addgt	r5, r5, r3
 80034d4:	341a      	adds	r4, #26
 80034d6:	454d      	cmp	r5, r9
 80034d8:	d11a      	bne.n	8003510 <_printf_common+0xd8>
 80034da:	2000      	movs	r0, #0
 80034dc:	e008      	b.n	80034f0 <_printf_common+0xb8>
 80034de:	2301      	movs	r3, #1
 80034e0:	4652      	mov	r2, sl
 80034e2:	4639      	mov	r1, r7
 80034e4:	4630      	mov	r0, r6
 80034e6:	47c0      	blx	r8
 80034e8:	3001      	adds	r0, #1
 80034ea:	d103      	bne.n	80034f4 <_printf_common+0xbc>
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f4:	3501      	adds	r5, #1
 80034f6:	e7c2      	b.n	800347e <_printf_common+0x46>
 80034f8:	2030      	movs	r0, #48	; 0x30
 80034fa:	18e1      	adds	r1, r4, r3
 80034fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003506:	4422      	add	r2, r4
 8003508:	3302      	adds	r3, #2
 800350a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800350e:	e7c4      	b.n	800349a <_printf_common+0x62>
 8003510:	2301      	movs	r3, #1
 8003512:	4622      	mov	r2, r4
 8003514:	4639      	mov	r1, r7
 8003516:	4630      	mov	r0, r6
 8003518:	47c0      	blx	r8
 800351a:	3001      	adds	r0, #1
 800351c:	d0e6      	beq.n	80034ec <_printf_common+0xb4>
 800351e:	f109 0901 	add.w	r9, r9, #1
 8003522:	e7d8      	b.n	80034d6 <_printf_common+0x9e>

08003524 <_printf_i>:
 8003524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003528:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800352c:	460c      	mov	r4, r1
 800352e:	7e09      	ldrb	r1, [r1, #24]
 8003530:	b085      	sub	sp, #20
 8003532:	296e      	cmp	r1, #110	; 0x6e
 8003534:	4617      	mov	r7, r2
 8003536:	4606      	mov	r6, r0
 8003538:	4698      	mov	r8, r3
 800353a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800353c:	f000 80b3 	beq.w	80036a6 <_printf_i+0x182>
 8003540:	d822      	bhi.n	8003588 <_printf_i+0x64>
 8003542:	2963      	cmp	r1, #99	; 0x63
 8003544:	d036      	beq.n	80035b4 <_printf_i+0x90>
 8003546:	d80a      	bhi.n	800355e <_printf_i+0x3a>
 8003548:	2900      	cmp	r1, #0
 800354a:	f000 80b9 	beq.w	80036c0 <_printf_i+0x19c>
 800354e:	2958      	cmp	r1, #88	; 0x58
 8003550:	f000 8083 	beq.w	800365a <_printf_i+0x136>
 8003554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003558:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800355c:	e032      	b.n	80035c4 <_printf_i+0xa0>
 800355e:	2964      	cmp	r1, #100	; 0x64
 8003560:	d001      	beq.n	8003566 <_printf_i+0x42>
 8003562:	2969      	cmp	r1, #105	; 0x69
 8003564:	d1f6      	bne.n	8003554 <_printf_i+0x30>
 8003566:	6820      	ldr	r0, [r4, #0]
 8003568:	6813      	ldr	r3, [r2, #0]
 800356a:	0605      	lsls	r5, r0, #24
 800356c:	f103 0104 	add.w	r1, r3, #4
 8003570:	d52a      	bpl.n	80035c8 <_printf_i+0xa4>
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6011      	str	r1, [r2, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	da03      	bge.n	8003582 <_printf_i+0x5e>
 800357a:	222d      	movs	r2, #45	; 0x2d
 800357c:	425b      	negs	r3, r3
 800357e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003582:	486f      	ldr	r0, [pc, #444]	; (8003740 <_printf_i+0x21c>)
 8003584:	220a      	movs	r2, #10
 8003586:	e039      	b.n	80035fc <_printf_i+0xd8>
 8003588:	2973      	cmp	r1, #115	; 0x73
 800358a:	f000 809d 	beq.w	80036c8 <_printf_i+0x1a4>
 800358e:	d808      	bhi.n	80035a2 <_printf_i+0x7e>
 8003590:	296f      	cmp	r1, #111	; 0x6f
 8003592:	d020      	beq.n	80035d6 <_printf_i+0xb2>
 8003594:	2970      	cmp	r1, #112	; 0x70
 8003596:	d1dd      	bne.n	8003554 <_printf_i+0x30>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	f043 0320 	orr.w	r3, r3, #32
 800359e:	6023      	str	r3, [r4, #0]
 80035a0:	e003      	b.n	80035aa <_printf_i+0x86>
 80035a2:	2975      	cmp	r1, #117	; 0x75
 80035a4:	d017      	beq.n	80035d6 <_printf_i+0xb2>
 80035a6:	2978      	cmp	r1, #120	; 0x78
 80035a8:	d1d4      	bne.n	8003554 <_printf_i+0x30>
 80035aa:	2378      	movs	r3, #120	; 0x78
 80035ac:	4865      	ldr	r0, [pc, #404]	; (8003744 <_printf_i+0x220>)
 80035ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035b2:	e055      	b.n	8003660 <_printf_i+0x13c>
 80035b4:	6813      	ldr	r3, [r2, #0]
 80035b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035ba:	1d19      	adds	r1, r3, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6011      	str	r1, [r2, #0]
 80035c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035c4:	2301      	movs	r3, #1
 80035c6:	e08c      	b.n	80036e2 <_printf_i+0x1be>
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035ce:	6011      	str	r1, [r2, #0]
 80035d0:	bf18      	it	ne
 80035d2:	b21b      	sxthne	r3, r3
 80035d4:	e7cf      	b.n	8003576 <_printf_i+0x52>
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	6825      	ldr	r5, [r4, #0]
 80035da:	1d18      	adds	r0, r3, #4
 80035dc:	6010      	str	r0, [r2, #0]
 80035de:	0628      	lsls	r0, r5, #24
 80035e0:	d501      	bpl.n	80035e6 <_printf_i+0xc2>
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	e002      	b.n	80035ec <_printf_i+0xc8>
 80035e6:	0668      	lsls	r0, r5, #25
 80035e8:	d5fb      	bpl.n	80035e2 <_printf_i+0xbe>
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	296f      	cmp	r1, #111	; 0x6f
 80035ee:	bf14      	ite	ne
 80035f0:	220a      	movne	r2, #10
 80035f2:	2208      	moveq	r2, #8
 80035f4:	4852      	ldr	r0, [pc, #328]	; (8003740 <_printf_i+0x21c>)
 80035f6:	2100      	movs	r1, #0
 80035f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035fc:	6865      	ldr	r5, [r4, #4]
 80035fe:	2d00      	cmp	r5, #0
 8003600:	60a5      	str	r5, [r4, #8]
 8003602:	f2c0 8095 	blt.w	8003730 <_printf_i+0x20c>
 8003606:	6821      	ldr	r1, [r4, #0]
 8003608:	f021 0104 	bic.w	r1, r1, #4
 800360c:	6021      	str	r1, [r4, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d13d      	bne.n	800368e <_printf_i+0x16a>
 8003612:	2d00      	cmp	r5, #0
 8003614:	f040 808e 	bne.w	8003734 <_printf_i+0x210>
 8003618:	4665      	mov	r5, ip
 800361a:	2a08      	cmp	r2, #8
 800361c:	d10b      	bne.n	8003636 <_printf_i+0x112>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	07db      	lsls	r3, r3, #31
 8003622:	d508      	bpl.n	8003636 <_printf_i+0x112>
 8003624:	6923      	ldr	r3, [r4, #16]
 8003626:	6862      	ldr	r2, [r4, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	bfde      	ittt	le
 800362c:	2330      	movle	r3, #48	; 0x30
 800362e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003632:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003636:	ebac 0305 	sub.w	r3, ip, r5
 800363a:	6123      	str	r3, [r4, #16]
 800363c:	f8cd 8000 	str.w	r8, [sp]
 8003640:	463b      	mov	r3, r7
 8003642:	aa03      	add	r2, sp, #12
 8003644:	4621      	mov	r1, r4
 8003646:	4630      	mov	r0, r6
 8003648:	f7ff fef6 	bl	8003438 <_printf_common>
 800364c:	3001      	adds	r0, #1
 800364e:	d14d      	bne.n	80036ec <_printf_i+0x1c8>
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	b005      	add	sp, #20
 8003656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800365a:	4839      	ldr	r0, [pc, #228]	; (8003740 <_printf_i+0x21c>)
 800365c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003660:	6813      	ldr	r3, [r2, #0]
 8003662:	6821      	ldr	r1, [r4, #0]
 8003664:	1d1d      	adds	r5, r3, #4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6015      	str	r5, [r2, #0]
 800366a:	060a      	lsls	r2, r1, #24
 800366c:	d50b      	bpl.n	8003686 <_printf_i+0x162>
 800366e:	07ca      	lsls	r2, r1, #31
 8003670:	bf44      	itt	mi
 8003672:	f041 0120 	orrmi.w	r1, r1, #32
 8003676:	6021      	strmi	r1, [r4, #0]
 8003678:	b91b      	cbnz	r3, 8003682 <_printf_i+0x15e>
 800367a:	6822      	ldr	r2, [r4, #0]
 800367c:	f022 0220 	bic.w	r2, r2, #32
 8003680:	6022      	str	r2, [r4, #0]
 8003682:	2210      	movs	r2, #16
 8003684:	e7b7      	b.n	80035f6 <_printf_i+0xd2>
 8003686:	064d      	lsls	r5, r1, #25
 8003688:	bf48      	it	mi
 800368a:	b29b      	uxthmi	r3, r3
 800368c:	e7ef      	b.n	800366e <_printf_i+0x14a>
 800368e:	4665      	mov	r5, ip
 8003690:	fbb3 f1f2 	udiv	r1, r3, r2
 8003694:	fb02 3311 	mls	r3, r2, r1, r3
 8003698:	5cc3      	ldrb	r3, [r0, r3]
 800369a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800369e:	460b      	mov	r3, r1
 80036a0:	2900      	cmp	r1, #0
 80036a2:	d1f5      	bne.n	8003690 <_printf_i+0x16c>
 80036a4:	e7b9      	b.n	800361a <_printf_i+0xf6>
 80036a6:	6813      	ldr	r3, [r2, #0]
 80036a8:	6825      	ldr	r5, [r4, #0]
 80036aa:	1d18      	adds	r0, r3, #4
 80036ac:	6961      	ldr	r1, [r4, #20]
 80036ae:	6010      	str	r0, [r2, #0]
 80036b0:	0628      	lsls	r0, r5, #24
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	d501      	bpl.n	80036ba <_printf_i+0x196>
 80036b6:	6019      	str	r1, [r3, #0]
 80036b8:	e002      	b.n	80036c0 <_printf_i+0x19c>
 80036ba:	066a      	lsls	r2, r5, #25
 80036bc:	d5fb      	bpl.n	80036b6 <_printf_i+0x192>
 80036be:	8019      	strh	r1, [r3, #0]
 80036c0:	2300      	movs	r3, #0
 80036c2:	4665      	mov	r5, ip
 80036c4:	6123      	str	r3, [r4, #16]
 80036c6:	e7b9      	b.n	800363c <_printf_i+0x118>
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	1d19      	adds	r1, r3, #4
 80036cc:	6011      	str	r1, [r2, #0]
 80036ce:	681d      	ldr	r5, [r3, #0]
 80036d0:	6862      	ldr	r2, [r4, #4]
 80036d2:	2100      	movs	r1, #0
 80036d4:	4628      	mov	r0, r5
 80036d6:	f000 f837 	bl	8003748 <memchr>
 80036da:	b108      	cbz	r0, 80036e0 <_printf_i+0x1bc>
 80036dc:	1b40      	subs	r0, r0, r5
 80036de:	6060      	str	r0, [r4, #4]
 80036e0:	6863      	ldr	r3, [r4, #4]
 80036e2:	6123      	str	r3, [r4, #16]
 80036e4:	2300      	movs	r3, #0
 80036e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ea:	e7a7      	b.n	800363c <_printf_i+0x118>
 80036ec:	6923      	ldr	r3, [r4, #16]
 80036ee:	462a      	mov	r2, r5
 80036f0:	4639      	mov	r1, r7
 80036f2:	4630      	mov	r0, r6
 80036f4:	47c0      	blx	r8
 80036f6:	3001      	adds	r0, #1
 80036f8:	d0aa      	beq.n	8003650 <_printf_i+0x12c>
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	079b      	lsls	r3, r3, #30
 80036fe:	d413      	bmi.n	8003728 <_printf_i+0x204>
 8003700:	68e0      	ldr	r0, [r4, #12]
 8003702:	9b03      	ldr	r3, [sp, #12]
 8003704:	4298      	cmp	r0, r3
 8003706:	bfb8      	it	lt
 8003708:	4618      	movlt	r0, r3
 800370a:	e7a3      	b.n	8003654 <_printf_i+0x130>
 800370c:	2301      	movs	r3, #1
 800370e:	464a      	mov	r2, r9
 8003710:	4639      	mov	r1, r7
 8003712:	4630      	mov	r0, r6
 8003714:	47c0      	blx	r8
 8003716:	3001      	adds	r0, #1
 8003718:	d09a      	beq.n	8003650 <_printf_i+0x12c>
 800371a:	3501      	adds	r5, #1
 800371c:	68e3      	ldr	r3, [r4, #12]
 800371e:	9a03      	ldr	r2, [sp, #12]
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	42ab      	cmp	r3, r5
 8003724:	dcf2      	bgt.n	800370c <_printf_i+0x1e8>
 8003726:	e7eb      	b.n	8003700 <_printf_i+0x1dc>
 8003728:	2500      	movs	r5, #0
 800372a:	f104 0919 	add.w	r9, r4, #25
 800372e:	e7f5      	b.n	800371c <_printf_i+0x1f8>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ac      	bne.n	800368e <_printf_i+0x16a>
 8003734:	7803      	ldrb	r3, [r0, #0]
 8003736:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800373a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800373e:	e76c      	b.n	800361a <_printf_i+0xf6>
 8003740:	08004f59 	.word	0x08004f59
 8003744:	08004f6a 	.word	0x08004f6a

08003748 <memchr>:
 8003748:	b510      	push	{r4, lr}
 800374a:	b2c9      	uxtb	r1, r1
 800374c:	4402      	add	r2, r0
 800374e:	4290      	cmp	r0, r2
 8003750:	4603      	mov	r3, r0
 8003752:	d101      	bne.n	8003758 <memchr+0x10>
 8003754:	2300      	movs	r3, #0
 8003756:	e003      	b.n	8003760 <memchr+0x18>
 8003758:	781c      	ldrb	r4, [r3, #0]
 800375a:	3001      	adds	r0, #1
 800375c:	428c      	cmp	r4, r1
 800375e:	d1f6      	bne.n	800374e <memchr+0x6>
 8003760:	4618      	mov	r0, r3
 8003762:	bd10      	pop	{r4, pc}

08003764 <memcpy>:
 8003764:	b510      	push	{r4, lr}
 8003766:	1e43      	subs	r3, r0, #1
 8003768:	440a      	add	r2, r1
 800376a:	4291      	cmp	r1, r2
 800376c:	d100      	bne.n	8003770 <memcpy+0xc>
 800376e:	bd10      	pop	{r4, pc}
 8003770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003778:	e7f7      	b.n	800376a <memcpy+0x6>

0800377a <memmove>:
 800377a:	4288      	cmp	r0, r1
 800377c:	b510      	push	{r4, lr}
 800377e:	eb01 0302 	add.w	r3, r1, r2
 8003782:	d807      	bhi.n	8003794 <memmove+0x1a>
 8003784:	1e42      	subs	r2, r0, #1
 8003786:	4299      	cmp	r1, r3
 8003788:	d00a      	beq.n	80037a0 <memmove+0x26>
 800378a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800378e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003792:	e7f8      	b.n	8003786 <memmove+0xc>
 8003794:	4283      	cmp	r3, r0
 8003796:	d9f5      	bls.n	8003784 <memmove+0xa>
 8003798:	1881      	adds	r1, r0, r2
 800379a:	1ad2      	subs	r2, r2, r3
 800379c:	42d3      	cmn	r3, r2
 800379e:	d100      	bne.n	80037a2 <memmove+0x28>
 80037a0:	bd10      	pop	{r4, pc}
 80037a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037aa:	e7f7      	b.n	800379c <memmove+0x22>

080037ac <_realloc_r>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	4607      	mov	r7, r0
 80037b0:	4614      	mov	r4, r2
 80037b2:	460e      	mov	r6, r1
 80037b4:	b921      	cbnz	r1, 80037c0 <_realloc_r+0x14>
 80037b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037ba:	4611      	mov	r1, r2
 80037bc:	f7ff bbf6 	b.w	8002fac <_malloc_r>
 80037c0:	b922      	cbnz	r2, 80037cc <_realloc_r+0x20>
 80037c2:	f7ff fba7 	bl	8002f14 <_free_r>
 80037c6:	4625      	mov	r5, r4
 80037c8:	4628      	mov	r0, r5
 80037ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037cc:	f000 f814 	bl	80037f8 <_malloc_usable_size_r>
 80037d0:	42a0      	cmp	r0, r4
 80037d2:	d20f      	bcs.n	80037f4 <_realloc_r+0x48>
 80037d4:	4621      	mov	r1, r4
 80037d6:	4638      	mov	r0, r7
 80037d8:	f7ff fbe8 	bl	8002fac <_malloc_r>
 80037dc:	4605      	mov	r5, r0
 80037de:	2800      	cmp	r0, #0
 80037e0:	d0f2      	beq.n	80037c8 <_realloc_r+0x1c>
 80037e2:	4631      	mov	r1, r6
 80037e4:	4622      	mov	r2, r4
 80037e6:	f7ff ffbd 	bl	8003764 <memcpy>
 80037ea:	4631      	mov	r1, r6
 80037ec:	4638      	mov	r0, r7
 80037ee:	f7ff fb91 	bl	8002f14 <_free_r>
 80037f2:	e7e9      	b.n	80037c8 <_realloc_r+0x1c>
 80037f4:	4635      	mov	r5, r6
 80037f6:	e7e7      	b.n	80037c8 <_realloc_r+0x1c>

080037f8 <_malloc_usable_size_r>:
 80037f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037fc:	1f18      	subs	r0, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bfbc      	itt	lt
 8003802:	580b      	ldrlt	r3, [r1, r0]
 8003804:	18c0      	addlt	r0, r0, r3
 8003806:	4770      	bx	lr

08003808 <_init>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	bf00      	nop
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr

08003814 <_fini>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr
